
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Player
 * 
 */
export type Player = {
  player_id: number
  username: string
  avatar: string
  is_playing: boolean
  wines: number
  loses: number
  authentification_token: string
}

/**
 * Model game_history
 * 
 */
export type game_history = {
  id_game_history: number
  winner_id: number
  winner_scoor: number
  looser_id: number
  losser_scoor: number
  created_at: Date
}

/**
 * Model chatroom
 * 
 */
export type chatroom = {
  chat_room_id: number
  name: string
  ischannel: boolean
  ispublic: boolean
  password: string
  created_at: string
  updated_at: string
}

/**
 * Model message
 * 
 */
export type message = {
  message_id: number
  content: string
  created_at: Date
  author_id: number
  chat_id: number
}

/**
 * Model membership
 * 
 */
export type membership = {
  id_membership: number
  player_id: number
  chat_id: number
  rool: string
}

/**
 * Model relation
 * 
 */
export type relation = {
  id_relation: number
  player1_id: number
  player2_id: number
  status: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Players
 * const players = await prisma.player.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Players
   * const players = await prisma.player.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.player`: Exposes CRUD operations for the **Player** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Players
    * const players = await prisma.player.findMany()
    * ```
    */
  get player(): Prisma.PlayerDelegate<GlobalReject>;

  /**
   * `prisma.game_history`: Exposes CRUD operations for the **game_history** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Game_histories
    * const game_histories = await prisma.game_history.findMany()
    * ```
    */
  get game_history(): Prisma.game_historyDelegate<GlobalReject>;

  /**
   * `prisma.chatroom`: Exposes CRUD operations for the **chatroom** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chatrooms
    * const chatrooms = await prisma.chatroom.findMany()
    * ```
    */
  get chatroom(): Prisma.chatroomDelegate<GlobalReject>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.messageDelegate<GlobalReject>;

  /**
   * `prisma.membership`: Exposes CRUD operations for the **membership** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Memberships
    * const memberships = await prisma.membership.findMany()
    * ```
    */
  get membership(): Prisma.membershipDelegate<GlobalReject>;

  /**
   * `prisma.relation`: Exposes CRUD operations for the **relation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Relations
    * const relations = await prisma.relation.findMany()
    * ```
    */
  get relation(): Prisma.relationDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.6.1
   * Query Engine version: 694eea289a8462c80264df36757e4fdc129b1b32
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Player: 'Player',
    game_history: 'game_history',
    chatroom: 'chatroom',
    message: 'message',
    membership: 'membership',
    relation: 'relation'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PlayerCountOutputType
   */


  export type PlayerCountOutputType = {
    game_winned: number
    game_losed: number
    msgs: number
    membership: number
    relation_from: number
    relation_too: number
  }

  export type PlayerCountOutputTypeSelect = {
    game_winned?: boolean
    game_losed?: boolean
    msgs?: boolean
    membership?: boolean
    relation_from?: boolean
    relation_too?: boolean
  }

  export type PlayerCountOutputTypeGetPayload<S extends boolean | null | undefined | PlayerCountOutputTypeArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? PlayerCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (PlayerCountOutputTypeArgs)
    ? PlayerCountOutputType 
    : S extends { select: any } & (PlayerCountOutputTypeArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof PlayerCountOutputType ? PlayerCountOutputType[P] : never
  } 
      : PlayerCountOutputType




  // Custom InputTypes

  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the PlayerCountOutputType
     * 
    **/
    select?: PlayerCountOutputTypeSelect | null
  }



  /**
   * Count Type ChatroomCountOutputType
   */


  export type ChatroomCountOutputType = {
    msgs: number
    membership: number
  }

  export type ChatroomCountOutputTypeSelect = {
    msgs?: boolean
    membership?: boolean
  }

  export type ChatroomCountOutputTypeGetPayload<S extends boolean | null | undefined | ChatroomCountOutputTypeArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ChatroomCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ChatroomCountOutputTypeArgs)
    ? ChatroomCountOutputType 
    : S extends { select: any } & (ChatroomCountOutputTypeArgs)
      ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ChatroomCountOutputType ? ChatroomCountOutputType[P] : never
  } 
      : ChatroomCountOutputType




  // Custom InputTypes

  /**
   * ChatroomCountOutputType without action
   */
  export type ChatroomCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ChatroomCountOutputType
     * 
    **/
    select?: ChatroomCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Player
   */


  export type AggregatePlayer = {
    _count: PlayerCountAggregateOutputType | null
    _avg: PlayerAvgAggregateOutputType | null
    _sum: PlayerSumAggregateOutputType | null
    _min: PlayerMinAggregateOutputType | null
    _max: PlayerMaxAggregateOutputType | null
  }

  export type PlayerAvgAggregateOutputType = {
    player_id: number | null
    wines: number | null
    loses: number | null
  }

  export type PlayerSumAggregateOutputType = {
    player_id: number | null
    wines: number | null
    loses: number | null
  }

  export type PlayerMinAggregateOutputType = {
    player_id: number | null
    username: string | null
    avatar: string | null
    is_playing: boolean | null
    wines: number | null
    loses: number | null
    authentification_token: string | null
  }

  export type PlayerMaxAggregateOutputType = {
    player_id: number | null
    username: string | null
    avatar: string | null
    is_playing: boolean | null
    wines: number | null
    loses: number | null
    authentification_token: string | null
  }

  export type PlayerCountAggregateOutputType = {
    player_id: number
    username: number
    avatar: number
    is_playing: number
    wines: number
    loses: number
    authentification_token: number
    _all: number
  }


  export type PlayerAvgAggregateInputType = {
    player_id?: true
    wines?: true
    loses?: true
  }

  export type PlayerSumAggregateInputType = {
    player_id?: true
    wines?: true
    loses?: true
  }

  export type PlayerMinAggregateInputType = {
    player_id?: true
    username?: true
    avatar?: true
    is_playing?: true
    wines?: true
    loses?: true
    authentification_token?: true
  }

  export type PlayerMaxAggregateInputType = {
    player_id?: true
    username?: true
    avatar?: true
    is_playing?: true
    wines?: true
    loses?: true
    authentification_token?: true
  }

  export type PlayerCountAggregateInputType = {
    player_id?: true
    username?: true
    avatar?: true
    is_playing?: true
    wines?: true
    loses?: true
    authentification_token?: true
    _all?: true
  }

  export type PlayerAggregateArgs = {
    /**
     * Filter which Player to aggregate.
     * 
    **/
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     * 
    **/
    orderBy?: Enumerable<PlayerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Players
    **/
    _count?: true | PlayerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlayerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlayerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlayerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlayerMaxAggregateInputType
  }

  export type GetPlayerAggregateType<T extends PlayerAggregateArgs> = {
        [P in keyof T & keyof AggregatePlayer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlayer[P]>
      : GetScalarType<T[P], AggregatePlayer[P]>
  }




  export type PlayerGroupByArgs = {
    where?: PlayerWhereInput
    orderBy?: Enumerable<PlayerOrderByWithAggregationInput>
    by: Array<PlayerScalarFieldEnum>
    having?: PlayerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlayerCountAggregateInputType | true
    _avg?: PlayerAvgAggregateInputType
    _sum?: PlayerSumAggregateInputType
    _min?: PlayerMinAggregateInputType
    _max?: PlayerMaxAggregateInputType
  }


  export type PlayerGroupByOutputType = {
    player_id: number
    username: string
    avatar: string
    is_playing: boolean
    wines: number
    loses: number
    authentification_token: string
    _count: PlayerCountAggregateOutputType | null
    _avg: PlayerAvgAggregateOutputType | null
    _sum: PlayerSumAggregateOutputType | null
    _min: PlayerMinAggregateOutputType | null
    _max: PlayerMaxAggregateOutputType | null
  }

  type GetPlayerGroupByPayload<T extends PlayerGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PlayerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlayerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlayerGroupByOutputType[P]>
            : GetScalarType<T[P], PlayerGroupByOutputType[P]>
        }
      >
    >


  export type PlayerSelect = {
    player_id?: boolean
    username?: boolean
    avatar?: boolean
    is_playing?: boolean
    wines?: boolean
    loses?: boolean
    authentification_token?: boolean
    game_winned?: boolean | game_historyFindManyArgs
    game_losed?: boolean | game_historyFindManyArgs
    msgs?: boolean | messageFindManyArgs
    membership?: boolean | membershipFindManyArgs
    relation_from?: boolean | relationFindManyArgs
    relation_too?: boolean | relationFindManyArgs
    _count?: boolean | PlayerCountOutputTypeArgs
  }


  export type PlayerInclude = {
    game_winned?: boolean | game_historyFindManyArgs
    game_losed?: boolean | game_historyFindManyArgs
    msgs?: boolean | messageFindManyArgs
    membership?: boolean | membershipFindManyArgs
    relation_from?: boolean | relationFindManyArgs
    relation_too?: boolean | relationFindManyArgs
    _count?: boolean | PlayerCountOutputTypeArgs
  } 

  export type PlayerGetPayload<S extends boolean | null | undefined | PlayerArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Player :
    S extends undefined ? never :
    S extends { include: any } & (PlayerArgs | PlayerFindManyArgs)
    ? Player  & {
    [P in TrueKeys<S['include']>]:
        P extends 'game_winned' ? Array < game_historyGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'game_losed' ? Array < game_historyGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'msgs' ? Array < messageGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'membership' ? Array < membershipGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'relation_from' ? Array < relationGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'relation_too' ? Array < relationGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? PlayerCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (PlayerArgs | PlayerFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'game_winned' ? Array < game_historyGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'game_losed' ? Array < game_historyGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'msgs' ? Array < messageGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'membership' ? Array < membershipGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'relation_from' ? Array < relationGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'relation_too' ? Array < relationGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? PlayerCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Player ? Player[P] : never
  } 
      : Player


  type PlayerCountArgs = Merge<
    Omit<PlayerFindManyArgs, 'select' | 'include'> & {
      select?: PlayerCountAggregateInputType | true
    }
  >

  export interface PlayerDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Player that matches the filter.
     * @param {PlayerFindUniqueArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PlayerFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PlayerFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Player'> extends True ? Prisma__PlayerClient<PlayerGetPayload<T>> : Prisma__PlayerClient<PlayerGetPayload<T> | null, null>

    /**
     * Find the first Player that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindFirstArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PlayerFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PlayerFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Player'> extends True ? Prisma__PlayerClient<PlayerGetPayload<T>> : Prisma__PlayerClient<PlayerGetPayload<T> | null, null>

    /**
     * Find zero or more Players that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Players
     * const players = await prisma.player.findMany()
     * 
     * // Get first 10 Players
     * const players = await prisma.player.findMany({ take: 10 })
     * 
     * // Only select the `player_id`
     * const playerWithPlayer_idOnly = await prisma.player.findMany({ select: { player_id: true } })
     * 
    **/
    findMany<T extends PlayerFindManyArgs>(
      args?: SelectSubset<T, PlayerFindManyArgs>
    ): PrismaPromise<Array<PlayerGetPayload<T>>>

    /**
     * Create a Player.
     * @param {PlayerCreateArgs} args - Arguments to create a Player.
     * @example
     * // Create one Player
     * const Player = await prisma.player.create({
     *   data: {
     *     // ... data to create a Player
     *   }
     * })
     * 
    **/
    create<T extends PlayerCreateArgs>(
      args: SelectSubset<T, PlayerCreateArgs>
    ): Prisma__PlayerClient<PlayerGetPayload<T>>

    /**
     * Delete a Player.
     * @param {PlayerDeleteArgs} args - Arguments to delete one Player.
     * @example
     * // Delete one Player
     * const Player = await prisma.player.delete({
     *   where: {
     *     // ... filter to delete one Player
     *   }
     * })
     * 
    **/
    delete<T extends PlayerDeleteArgs>(
      args: SelectSubset<T, PlayerDeleteArgs>
    ): Prisma__PlayerClient<PlayerGetPayload<T>>

    /**
     * Update one Player.
     * @param {PlayerUpdateArgs} args - Arguments to update one Player.
     * @example
     * // Update one Player
     * const player = await prisma.player.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PlayerUpdateArgs>(
      args: SelectSubset<T, PlayerUpdateArgs>
    ): Prisma__PlayerClient<PlayerGetPayload<T>>

    /**
     * Delete zero or more Players.
     * @param {PlayerDeleteManyArgs} args - Arguments to filter Players to delete.
     * @example
     * // Delete a few Players
     * const { count } = await prisma.player.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PlayerDeleteManyArgs>(
      args?: SelectSubset<T, PlayerDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Players.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Players
     * const player = await prisma.player.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PlayerUpdateManyArgs>(
      args: SelectSubset<T, PlayerUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Player.
     * @param {PlayerUpsertArgs} args - Arguments to update or create a Player.
     * @example
     * // Update or create a Player
     * const player = await prisma.player.upsert({
     *   create: {
     *     // ... data to create a Player
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Player we want to update
     *   }
     * })
    **/
    upsert<T extends PlayerUpsertArgs>(
      args: SelectSubset<T, PlayerUpsertArgs>
    ): Prisma__PlayerClient<PlayerGetPayload<T>>

    /**
     * Find one Player that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {PlayerFindUniqueOrThrowArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PlayerFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PlayerFindUniqueOrThrowArgs>
    ): Prisma__PlayerClient<PlayerGetPayload<T>>

    /**
     * Find the first Player that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindFirstOrThrowArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PlayerFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PlayerFindFirstOrThrowArgs>
    ): Prisma__PlayerClient<PlayerGetPayload<T>>

    /**
     * Count the number of Players.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerCountArgs} args - Arguments to filter Players to count.
     * @example
     * // Count the number of Players
     * const count = await prisma.player.count({
     *   where: {
     *     // ... the filter for the Players we want to count
     *   }
     * })
    **/
    count<T extends PlayerCountArgs>(
      args?: Subset<T, PlayerCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlayerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Player.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlayerAggregateArgs>(args: Subset<T, PlayerAggregateArgs>): PrismaPromise<GetPlayerAggregateType<T>>

    /**
     * Group by Player.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlayerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlayerGroupByArgs['orderBy'] }
        : { orderBy?: PlayerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlayerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlayerGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Player.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PlayerClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    game_winned<T extends game_historyFindManyArgs= {}>(args?: Subset<T, game_historyFindManyArgs>): PrismaPromise<Array<game_historyGetPayload<T>>| Null>;

    game_losed<T extends game_historyFindManyArgs= {}>(args?: Subset<T, game_historyFindManyArgs>): PrismaPromise<Array<game_historyGetPayload<T>>| Null>;

    msgs<T extends messageFindManyArgs= {}>(args?: Subset<T, messageFindManyArgs>): PrismaPromise<Array<messageGetPayload<T>>| Null>;

    membership<T extends membershipFindManyArgs= {}>(args?: Subset<T, membershipFindManyArgs>): PrismaPromise<Array<membershipGetPayload<T>>| Null>;

    relation_from<T extends relationFindManyArgs= {}>(args?: Subset<T, relationFindManyArgs>): PrismaPromise<Array<relationGetPayload<T>>| Null>;

    relation_too<T extends relationFindManyArgs= {}>(args?: Subset<T, relationFindManyArgs>): PrismaPromise<Array<relationGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Player base type for findUnique actions
   */
  export type PlayerFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Player
     * 
    **/
    select?: PlayerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PlayerInclude | null
    /**
     * Filter, which Player to fetch.
     * 
    **/
    where: PlayerWhereUniqueInput
  }

  /**
   * Player: findUnique
   */
  export interface PlayerFindUniqueArgs extends PlayerFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Player base type for findFirst actions
   */
  export type PlayerFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Player
     * 
    **/
    select?: PlayerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PlayerInclude | null
    /**
     * Filter, which Player to fetch.
     * 
    **/
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     * 
    **/
    orderBy?: Enumerable<PlayerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Players.
     * 
    **/
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Players.
     * 
    **/
    distinct?: Enumerable<PlayerScalarFieldEnum>
  }

  /**
   * Player: findFirst
   */
  export interface PlayerFindFirstArgs extends PlayerFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Player findMany
   */
  export type PlayerFindManyArgs = {
    /**
     * Select specific fields to fetch from the Player
     * 
    **/
    select?: PlayerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PlayerInclude | null
    /**
     * Filter, which Players to fetch.
     * 
    **/
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     * 
    **/
    orderBy?: Enumerable<PlayerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Players.
     * 
    **/
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PlayerScalarFieldEnum>
  }


  /**
   * Player create
   */
  export type PlayerCreateArgs = {
    /**
     * Select specific fields to fetch from the Player
     * 
    **/
    select?: PlayerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PlayerInclude | null
    /**
     * The data needed to create a Player.
     * 
    **/
    data: XOR<PlayerCreateInput, PlayerUncheckedCreateInput>
  }


  /**
   * Player update
   */
  export type PlayerUpdateArgs = {
    /**
     * Select specific fields to fetch from the Player
     * 
    **/
    select?: PlayerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PlayerInclude | null
    /**
     * The data needed to update a Player.
     * 
    **/
    data: XOR<PlayerUpdateInput, PlayerUncheckedUpdateInput>
    /**
     * Choose, which Player to update.
     * 
    **/
    where: PlayerWhereUniqueInput
  }


  /**
   * Player updateMany
   */
  export type PlayerUpdateManyArgs = {
    /**
     * The data used to update Players.
     * 
    **/
    data: XOR<PlayerUpdateManyMutationInput, PlayerUncheckedUpdateManyInput>
    /**
     * Filter which Players to update
     * 
    **/
    where?: PlayerWhereInput
  }


  /**
   * Player upsert
   */
  export type PlayerUpsertArgs = {
    /**
     * Select specific fields to fetch from the Player
     * 
    **/
    select?: PlayerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PlayerInclude | null
    /**
     * The filter to search for the Player to update in case it exists.
     * 
    **/
    where: PlayerWhereUniqueInput
    /**
     * In case the Player found by the `where` argument doesn't exist, create a new Player with this data.
     * 
    **/
    create: XOR<PlayerCreateInput, PlayerUncheckedCreateInput>
    /**
     * In case the Player was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PlayerUpdateInput, PlayerUncheckedUpdateInput>
  }


  /**
   * Player delete
   */
  export type PlayerDeleteArgs = {
    /**
     * Select specific fields to fetch from the Player
     * 
    **/
    select?: PlayerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PlayerInclude | null
    /**
     * Filter which Player to delete.
     * 
    **/
    where: PlayerWhereUniqueInput
  }


  /**
   * Player deleteMany
   */
  export type PlayerDeleteManyArgs = {
    /**
     * Filter which Players to delete
     * 
    **/
    where?: PlayerWhereInput
  }


  /**
   * Player: findUniqueOrThrow
   */
  export type PlayerFindUniqueOrThrowArgs = PlayerFindUniqueArgsBase
      

  /**
   * Player: findFirstOrThrow
   */
  export type PlayerFindFirstOrThrowArgs = PlayerFindFirstArgsBase
      

  /**
   * Player without action
   */
  export type PlayerArgs = {
    /**
     * Select specific fields to fetch from the Player
     * 
    **/
    select?: PlayerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PlayerInclude | null
  }



  /**
   * Model game_history
   */


  export type AggregateGame_history = {
    _count: Game_historyCountAggregateOutputType | null
    _avg: Game_historyAvgAggregateOutputType | null
    _sum: Game_historySumAggregateOutputType | null
    _min: Game_historyMinAggregateOutputType | null
    _max: Game_historyMaxAggregateOutputType | null
  }

  export type Game_historyAvgAggregateOutputType = {
    id_game_history: number | null
    winner_id: number | null
    winner_scoor: number | null
    looser_id: number | null
    losser_scoor: number | null
  }

  export type Game_historySumAggregateOutputType = {
    id_game_history: number | null
    winner_id: number | null
    winner_scoor: number | null
    looser_id: number | null
    losser_scoor: number | null
  }

  export type Game_historyMinAggregateOutputType = {
    id_game_history: number | null
    winner_id: number | null
    winner_scoor: number | null
    looser_id: number | null
    losser_scoor: number | null
    created_at: Date | null
  }

  export type Game_historyMaxAggregateOutputType = {
    id_game_history: number | null
    winner_id: number | null
    winner_scoor: number | null
    looser_id: number | null
    losser_scoor: number | null
    created_at: Date | null
  }

  export type Game_historyCountAggregateOutputType = {
    id_game_history: number
    winner_id: number
    winner_scoor: number
    looser_id: number
    losser_scoor: number
    created_at: number
    _all: number
  }


  export type Game_historyAvgAggregateInputType = {
    id_game_history?: true
    winner_id?: true
    winner_scoor?: true
    looser_id?: true
    losser_scoor?: true
  }

  export type Game_historySumAggregateInputType = {
    id_game_history?: true
    winner_id?: true
    winner_scoor?: true
    looser_id?: true
    losser_scoor?: true
  }

  export type Game_historyMinAggregateInputType = {
    id_game_history?: true
    winner_id?: true
    winner_scoor?: true
    looser_id?: true
    losser_scoor?: true
    created_at?: true
  }

  export type Game_historyMaxAggregateInputType = {
    id_game_history?: true
    winner_id?: true
    winner_scoor?: true
    looser_id?: true
    losser_scoor?: true
    created_at?: true
  }

  export type Game_historyCountAggregateInputType = {
    id_game_history?: true
    winner_id?: true
    winner_scoor?: true
    looser_id?: true
    losser_scoor?: true
    created_at?: true
    _all?: true
  }

  export type Game_historyAggregateArgs = {
    /**
     * Filter which game_history to aggregate.
     * 
    **/
    where?: game_historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of game_histories to fetch.
     * 
    **/
    orderBy?: Enumerable<game_historyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: game_historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` game_histories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` game_histories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned game_histories
    **/
    _count?: true | Game_historyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Game_historyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Game_historySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Game_historyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Game_historyMaxAggregateInputType
  }

  export type GetGame_historyAggregateType<T extends Game_historyAggregateArgs> = {
        [P in keyof T & keyof AggregateGame_history]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGame_history[P]>
      : GetScalarType<T[P], AggregateGame_history[P]>
  }




  export type Game_historyGroupByArgs = {
    where?: game_historyWhereInput
    orderBy?: Enumerable<game_historyOrderByWithAggregationInput>
    by: Array<Game_historyScalarFieldEnum>
    having?: game_historyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Game_historyCountAggregateInputType | true
    _avg?: Game_historyAvgAggregateInputType
    _sum?: Game_historySumAggregateInputType
    _min?: Game_historyMinAggregateInputType
    _max?: Game_historyMaxAggregateInputType
  }


  export type Game_historyGroupByOutputType = {
    id_game_history: number
    winner_id: number
    winner_scoor: number
    looser_id: number
    losser_scoor: number
    created_at: Date
    _count: Game_historyCountAggregateOutputType | null
    _avg: Game_historyAvgAggregateOutputType | null
    _sum: Game_historySumAggregateOutputType | null
    _min: Game_historyMinAggregateOutputType | null
    _max: Game_historyMaxAggregateOutputType | null
  }

  type GetGame_historyGroupByPayload<T extends Game_historyGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Game_historyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Game_historyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Game_historyGroupByOutputType[P]>
            : GetScalarType<T[P], Game_historyGroupByOutputType[P]>
        }
      >
    >


  export type game_historySelect = {
    id_game_history?: boolean
    winner?: boolean | PlayerArgs
    winner_id?: boolean
    winner_scoor?: boolean
    looser?: boolean | PlayerArgs
    looser_id?: boolean
    losser_scoor?: boolean
    created_at?: boolean
  }


  export type game_historyInclude = {
    winner?: boolean | PlayerArgs
    looser?: boolean | PlayerArgs
  } 

  export type game_historyGetPayload<S extends boolean | null | undefined | game_historyArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? game_history :
    S extends undefined ? never :
    S extends { include: any } & (game_historyArgs | game_historyFindManyArgs)
    ? game_history  & {
    [P in TrueKeys<S['include']>]:
        P extends 'winner' ? PlayerGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'looser' ? PlayerGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (game_historyArgs | game_historyFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'winner' ? PlayerGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'looser' ? PlayerGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof game_history ? game_history[P] : never
  } 
      : game_history


  type game_historyCountArgs = Merge<
    Omit<game_historyFindManyArgs, 'select' | 'include'> & {
      select?: Game_historyCountAggregateInputType | true
    }
  >

  export interface game_historyDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Game_history that matches the filter.
     * @param {game_historyFindUniqueArgs} args - Arguments to find a Game_history
     * @example
     * // Get one Game_history
     * const game_history = await prisma.game_history.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends game_historyFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, game_historyFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'game_history'> extends True ? Prisma__game_historyClient<game_historyGetPayload<T>> : Prisma__game_historyClient<game_historyGetPayload<T> | null, null>

    /**
     * Find the first Game_history that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {game_historyFindFirstArgs} args - Arguments to find a Game_history
     * @example
     * // Get one Game_history
     * const game_history = await prisma.game_history.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends game_historyFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, game_historyFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'game_history'> extends True ? Prisma__game_historyClient<game_historyGetPayload<T>> : Prisma__game_historyClient<game_historyGetPayload<T> | null, null>

    /**
     * Find zero or more Game_histories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {game_historyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Game_histories
     * const game_histories = await prisma.game_history.findMany()
     * 
     * // Get first 10 Game_histories
     * const game_histories = await prisma.game_history.findMany({ take: 10 })
     * 
     * // Only select the `id_game_history`
     * const game_historyWithId_game_historyOnly = await prisma.game_history.findMany({ select: { id_game_history: true } })
     * 
    **/
    findMany<T extends game_historyFindManyArgs>(
      args?: SelectSubset<T, game_historyFindManyArgs>
    ): PrismaPromise<Array<game_historyGetPayload<T>>>

    /**
     * Create a Game_history.
     * @param {game_historyCreateArgs} args - Arguments to create a Game_history.
     * @example
     * // Create one Game_history
     * const Game_history = await prisma.game_history.create({
     *   data: {
     *     // ... data to create a Game_history
     *   }
     * })
     * 
    **/
    create<T extends game_historyCreateArgs>(
      args: SelectSubset<T, game_historyCreateArgs>
    ): Prisma__game_historyClient<game_historyGetPayload<T>>

    /**
     * Delete a Game_history.
     * @param {game_historyDeleteArgs} args - Arguments to delete one Game_history.
     * @example
     * // Delete one Game_history
     * const Game_history = await prisma.game_history.delete({
     *   where: {
     *     // ... filter to delete one Game_history
     *   }
     * })
     * 
    **/
    delete<T extends game_historyDeleteArgs>(
      args: SelectSubset<T, game_historyDeleteArgs>
    ): Prisma__game_historyClient<game_historyGetPayload<T>>

    /**
     * Update one Game_history.
     * @param {game_historyUpdateArgs} args - Arguments to update one Game_history.
     * @example
     * // Update one Game_history
     * const game_history = await prisma.game_history.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends game_historyUpdateArgs>(
      args: SelectSubset<T, game_historyUpdateArgs>
    ): Prisma__game_historyClient<game_historyGetPayload<T>>

    /**
     * Delete zero or more Game_histories.
     * @param {game_historyDeleteManyArgs} args - Arguments to filter Game_histories to delete.
     * @example
     * // Delete a few Game_histories
     * const { count } = await prisma.game_history.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends game_historyDeleteManyArgs>(
      args?: SelectSubset<T, game_historyDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Game_histories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {game_historyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Game_histories
     * const game_history = await prisma.game_history.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends game_historyUpdateManyArgs>(
      args: SelectSubset<T, game_historyUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Game_history.
     * @param {game_historyUpsertArgs} args - Arguments to update or create a Game_history.
     * @example
     * // Update or create a Game_history
     * const game_history = await prisma.game_history.upsert({
     *   create: {
     *     // ... data to create a Game_history
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Game_history we want to update
     *   }
     * })
    **/
    upsert<T extends game_historyUpsertArgs>(
      args: SelectSubset<T, game_historyUpsertArgs>
    ): Prisma__game_historyClient<game_historyGetPayload<T>>

    /**
     * Find one Game_history that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {game_historyFindUniqueOrThrowArgs} args - Arguments to find a Game_history
     * @example
     * // Get one Game_history
     * const game_history = await prisma.game_history.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends game_historyFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, game_historyFindUniqueOrThrowArgs>
    ): Prisma__game_historyClient<game_historyGetPayload<T>>

    /**
     * Find the first Game_history that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {game_historyFindFirstOrThrowArgs} args - Arguments to find a Game_history
     * @example
     * // Get one Game_history
     * const game_history = await prisma.game_history.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends game_historyFindFirstOrThrowArgs>(
      args?: SelectSubset<T, game_historyFindFirstOrThrowArgs>
    ): Prisma__game_historyClient<game_historyGetPayload<T>>

    /**
     * Count the number of Game_histories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {game_historyCountArgs} args - Arguments to filter Game_histories to count.
     * @example
     * // Count the number of Game_histories
     * const count = await prisma.game_history.count({
     *   where: {
     *     // ... the filter for the Game_histories we want to count
     *   }
     * })
    **/
    count<T extends game_historyCountArgs>(
      args?: Subset<T, game_historyCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Game_historyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Game_history.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Game_historyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Game_historyAggregateArgs>(args: Subset<T, Game_historyAggregateArgs>): PrismaPromise<GetGame_historyAggregateType<T>>

    /**
     * Group by Game_history.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Game_historyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Game_historyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Game_historyGroupByArgs['orderBy'] }
        : { orderBy?: Game_historyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Game_historyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGame_historyGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for game_history.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__game_historyClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    winner<T extends PlayerArgs= {}>(args?: Subset<T, PlayerArgs>): Prisma__PlayerClient<PlayerGetPayload<T> | Null>;

    looser<T extends PlayerArgs= {}>(args?: Subset<T, PlayerArgs>): Prisma__PlayerClient<PlayerGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * game_history base type for findUnique actions
   */
  export type game_historyFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the game_history
     * 
    **/
    select?: game_historySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: game_historyInclude | null
    /**
     * Filter, which game_history to fetch.
     * 
    **/
    where: game_historyWhereUniqueInput
  }

  /**
   * game_history: findUnique
   */
  export interface game_historyFindUniqueArgs extends game_historyFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * game_history base type for findFirst actions
   */
  export type game_historyFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the game_history
     * 
    **/
    select?: game_historySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: game_historyInclude | null
    /**
     * Filter, which game_history to fetch.
     * 
    **/
    where?: game_historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of game_histories to fetch.
     * 
    **/
    orderBy?: Enumerable<game_historyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for game_histories.
     * 
    **/
    cursor?: game_historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` game_histories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` game_histories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of game_histories.
     * 
    **/
    distinct?: Enumerable<Game_historyScalarFieldEnum>
  }

  /**
   * game_history: findFirst
   */
  export interface game_historyFindFirstArgs extends game_historyFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * game_history findMany
   */
  export type game_historyFindManyArgs = {
    /**
     * Select specific fields to fetch from the game_history
     * 
    **/
    select?: game_historySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: game_historyInclude | null
    /**
     * Filter, which game_histories to fetch.
     * 
    **/
    where?: game_historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of game_histories to fetch.
     * 
    **/
    orderBy?: Enumerable<game_historyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing game_histories.
     * 
    **/
    cursor?: game_historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` game_histories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` game_histories.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Game_historyScalarFieldEnum>
  }


  /**
   * game_history create
   */
  export type game_historyCreateArgs = {
    /**
     * Select specific fields to fetch from the game_history
     * 
    **/
    select?: game_historySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: game_historyInclude | null
    /**
     * The data needed to create a game_history.
     * 
    **/
    data: XOR<game_historyCreateInput, game_historyUncheckedCreateInput>
  }


  /**
   * game_history update
   */
  export type game_historyUpdateArgs = {
    /**
     * Select specific fields to fetch from the game_history
     * 
    **/
    select?: game_historySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: game_historyInclude | null
    /**
     * The data needed to update a game_history.
     * 
    **/
    data: XOR<game_historyUpdateInput, game_historyUncheckedUpdateInput>
    /**
     * Choose, which game_history to update.
     * 
    **/
    where: game_historyWhereUniqueInput
  }


  /**
   * game_history updateMany
   */
  export type game_historyUpdateManyArgs = {
    /**
     * The data used to update game_histories.
     * 
    **/
    data: XOR<game_historyUpdateManyMutationInput, game_historyUncheckedUpdateManyInput>
    /**
     * Filter which game_histories to update
     * 
    **/
    where?: game_historyWhereInput
  }


  /**
   * game_history upsert
   */
  export type game_historyUpsertArgs = {
    /**
     * Select specific fields to fetch from the game_history
     * 
    **/
    select?: game_historySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: game_historyInclude | null
    /**
     * The filter to search for the game_history to update in case it exists.
     * 
    **/
    where: game_historyWhereUniqueInput
    /**
     * In case the game_history found by the `where` argument doesn't exist, create a new game_history with this data.
     * 
    **/
    create: XOR<game_historyCreateInput, game_historyUncheckedCreateInput>
    /**
     * In case the game_history was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<game_historyUpdateInput, game_historyUncheckedUpdateInput>
  }


  /**
   * game_history delete
   */
  export type game_historyDeleteArgs = {
    /**
     * Select specific fields to fetch from the game_history
     * 
    **/
    select?: game_historySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: game_historyInclude | null
    /**
     * Filter which game_history to delete.
     * 
    **/
    where: game_historyWhereUniqueInput
  }


  /**
   * game_history deleteMany
   */
  export type game_historyDeleteManyArgs = {
    /**
     * Filter which game_histories to delete
     * 
    **/
    where?: game_historyWhereInput
  }


  /**
   * game_history: findUniqueOrThrow
   */
  export type game_historyFindUniqueOrThrowArgs = game_historyFindUniqueArgsBase
      

  /**
   * game_history: findFirstOrThrow
   */
  export type game_historyFindFirstOrThrowArgs = game_historyFindFirstArgsBase
      

  /**
   * game_history without action
   */
  export type game_historyArgs = {
    /**
     * Select specific fields to fetch from the game_history
     * 
    **/
    select?: game_historySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: game_historyInclude | null
  }



  /**
   * Model chatroom
   */


  export type AggregateChatroom = {
    _count: ChatroomCountAggregateOutputType | null
    _avg: ChatroomAvgAggregateOutputType | null
    _sum: ChatroomSumAggregateOutputType | null
    _min: ChatroomMinAggregateOutputType | null
    _max: ChatroomMaxAggregateOutputType | null
  }

  export type ChatroomAvgAggregateOutputType = {
    chat_room_id: number | null
  }

  export type ChatroomSumAggregateOutputType = {
    chat_room_id: number | null
  }

  export type ChatroomMinAggregateOutputType = {
    chat_room_id: number | null
    name: string | null
    ischannel: boolean | null
    ispublic: boolean | null
    password: string | null
    created_at: string | null
    updated_at: string | null
  }

  export type ChatroomMaxAggregateOutputType = {
    chat_room_id: number | null
    name: string | null
    ischannel: boolean | null
    ispublic: boolean | null
    password: string | null
    created_at: string | null
    updated_at: string | null
  }

  export type ChatroomCountAggregateOutputType = {
    chat_room_id: number
    name: number
    ischannel: number
    ispublic: number
    password: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type ChatroomAvgAggregateInputType = {
    chat_room_id?: true
  }

  export type ChatroomSumAggregateInputType = {
    chat_room_id?: true
  }

  export type ChatroomMinAggregateInputType = {
    chat_room_id?: true
    name?: true
    ischannel?: true
    ispublic?: true
    password?: true
    created_at?: true
    updated_at?: true
  }

  export type ChatroomMaxAggregateInputType = {
    chat_room_id?: true
    name?: true
    ischannel?: true
    ispublic?: true
    password?: true
    created_at?: true
    updated_at?: true
  }

  export type ChatroomCountAggregateInputType = {
    chat_room_id?: true
    name?: true
    ischannel?: true
    ispublic?: true
    password?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ChatroomAggregateArgs = {
    /**
     * Filter which chatroom to aggregate.
     * 
    **/
    where?: chatroomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chatrooms to fetch.
     * 
    **/
    orderBy?: Enumerable<chatroomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: chatroomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chatrooms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chatrooms.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chatrooms
    **/
    _count?: true | ChatroomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChatroomAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChatroomSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatroomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatroomMaxAggregateInputType
  }

  export type GetChatroomAggregateType<T extends ChatroomAggregateArgs> = {
        [P in keyof T & keyof AggregateChatroom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatroom[P]>
      : GetScalarType<T[P], AggregateChatroom[P]>
  }




  export type ChatroomGroupByArgs = {
    where?: chatroomWhereInput
    orderBy?: Enumerable<chatroomOrderByWithAggregationInput>
    by: Array<ChatroomScalarFieldEnum>
    having?: chatroomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatroomCountAggregateInputType | true
    _avg?: ChatroomAvgAggregateInputType
    _sum?: ChatroomSumAggregateInputType
    _min?: ChatroomMinAggregateInputType
    _max?: ChatroomMaxAggregateInputType
  }


  export type ChatroomGroupByOutputType = {
    chat_room_id: number
    name: string
    ischannel: boolean
    ispublic: boolean
    password: string
    created_at: string
    updated_at: string
    _count: ChatroomCountAggregateOutputType | null
    _avg: ChatroomAvgAggregateOutputType | null
    _sum: ChatroomSumAggregateOutputType | null
    _min: ChatroomMinAggregateOutputType | null
    _max: ChatroomMaxAggregateOutputType | null
  }

  type GetChatroomGroupByPayload<T extends ChatroomGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ChatroomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatroomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatroomGroupByOutputType[P]>
            : GetScalarType<T[P], ChatroomGroupByOutputType[P]>
        }
      >
    >


  export type chatroomSelect = {
    chat_room_id?: boolean
    name?: boolean
    ischannel?: boolean
    ispublic?: boolean
    password?: boolean
    created_at?: boolean
    updated_at?: boolean
    msgs?: boolean | messageFindManyArgs
    membership?: boolean | membershipFindManyArgs
    _count?: boolean | ChatroomCountOutputTypeArgs
  }


  export type chatroomInclude = {
    msgs?: boolean | messageFindManyArgs
    membership?: boolean | membershipFindManyArgs
    _count?: boolean | ChatroomCountOutputTypeArgs
  } 

  export type chatroomGetPayload<S extends boolean | null | undefined | chatroomArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? chatroom :
    S extends undefined ? never :
    S extends { include: any } & (chatroomArgs | chatroomFindManyArgs)
    ? chatroom  & {
    [P in TrueKeys<S['include']>]:
        P extends 'msgs' ? Array < messageGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'membership' ? Array < membershipGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? ChatroomCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (chatroomArgs | chatroomFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'msgs' ? Array < messageGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'membership' ? Array < membershipGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? ChatroomCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof chatroom ? chatroom[P] : never
  } 
      : chatroom


  type chatroomCountArgs = Merge<
    Omit<chatroomFindManyArgs, 'select' | 'include'> & {
      select?: ChatroomCountAggregateInputType | true
    }
  >

  export interface chatroomDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Chatroom that matches the filter.
     * @param {chatroomFindUniqueArgs} args - Arguments to find a Chatroom
     * @example
     * // Get one Chatroom
     * const chatroom = await prisma.chatroom.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chatroomFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chatroomFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chatroom'> extends True ? Prisma__chatroomClient<chatroomGetPayload<T>> : Prisma__chatroomClient<chatroomGetPayload<T> | null, null>

    /**
     * Find the first Chatroom that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chatroomFindFirstArgs} args - Arguments to find a Chatroom
     * @example
     * // Get one Chatroom
     * const chatroom = await prisma.chatroom.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chatroomFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chatroomFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chatroom'> extends True ? Prisma__chatroomClient<chatroomGetPayload<T>> : Prisma__chatroomClient<chatroomGetPayload<T> | null, null>

    /**
     * Find zero or more Chatrooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chatroomFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chatrooms
     * const chatrooms = await prisma.chatroom.findMany()
     * 
     * // Get first 10 Chatrooms
     * const chatrooms = await prisma.chatroom.findMany({ take: 10 })
     * 
     * // Only select the `chat_room_id`
     * const chatroomWithChat_room_idOnly = await prisma.chatroom.findMany({ select: { chat_room_id: true } })
     * 
    **/
    findMany<T extends chatroomFindManyArgs>(
      args?: SelectSubset<T, chatroomFindManyArgs>
    ): PrismaPromise<Array<chatroomGetPayload<T>>>

    /**
     * Create a Chatroom.
     * @param {chatroomCreateArgs} args - Arguments to create a Chatroom.
     * @example
     * // Create one Chatroom
     * const Chatroom = await prisma.chatroom.create({
     *   data: {
     *     // ... data to create a Chatroom
     *   }
     * })
     * 
    **/
    create<T extends chatroomCreateArgs>(
      args: SelectSubset<T, chatroomCreateArgs>
    ): Prisma__chatroomClient<chatroomGetPayload<T>>

    /**
     * Delete a Chatroom.
     * @param {chatroomDeleteArgs} args - Arguments to delete one Chatroom.
     * @example
     * // Delete one Chatroom
     * const Chatroom = await prisma.chatroom.delete({
     *   where: {
     *     // ... filter to delete one Chatroom
     *   }
     * })
     * 
    **/
    delete<T extends chatroomDeleteArgs>(
      args: SelectSubset<T, chatroomDeleteArgs>
    ): Prisma__chatroomClient<chatroomGetPayload<T>>

    /**
     * Update one Chatroom.
     * @param {chatroomUpdateArgs} args - Arguments to update one Chatroom.
     * @example
     * // Update one Chatroom
     * const chatroom = await prisma.chatroom.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chatroomUpdateArgs>(
      args: SelectSubset<T, chatroomUpdateArgs>
    ): Prisma__chatroomClient<chatroomGetPayload<T>>

    /**
     * Delete zero or more Chatrooms.
     * @param {chatroomDeleteManyArgs} args - Arguments to filter Chatrooms to delete.
     * @example
     * // Delete a few Chatrooms
     * const { count } = await prisma.chatroom.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chatroomDeleteManyArgs>(
      args?: SelectSubset<T, chatroomDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chatrooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chatroomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chatrooms
     * const chatroom = await prisma.chatroom.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chatroomUpdateManyArgs>(
      args: SelectSubset<T, chatroomUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Chatroom.
     * @param {chatroomUpsertArgs} args - Arguments to update or create a Chatroom.
     * @example
     * // Update or create a Chatroom
     * const chatroom = await prisma.chatroom.upsert({
     *   create: {
     *     // ... data to create a Chatroom
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chatroom we want to update
     *   }
     * })
    **/
    upsert<T extends chatroomUpsertArgs>(
      args: SelectSubset<T, chatroomUpsertArgs>
    ): Prisma__chatroomClient<chatroomGetPayload<T>>

    /**
     * Find one Chatroom that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {chatroomFindUniqueOrThrowArgs} args - Arguments to find a Chatroom
     * @example
     * // Get one Chatroom
     * const chatroom = await prisma.chatroom.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chatroomFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, chatroomFindUniqueOrThrowArgs>
    ): Prisma__chatroomClient<chatroomGetPayload<T>>

    /**
     * Find the first Chatroom that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chatroomFindFirstOrThrowArgs} args - Arguments to find a Chatroom
     * @example
     * // Get one Chatroom
     * const chatroom = await prisma.chatroom.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chatroomFindFirstOrThrowArgs>(
      args?: SelectSubset<T, chatroomFindFirstOrThrowArgs>
    ): Prisma__chatroomClient<chatroomGetPayload<T>>

    /**
     * Count the number of Chatrooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chatroomCountArgs} args - Arguments to filter Chatrooms to count.
     * @example
     * // Count the number of Chatrooms
     * const count = await prisma.chatroom.count({
     *   where: {
     *     // ... the filter for the Chatrooms we want to count
     *   }
     * })
    **/
    count<T extends chatroomCountArgs>(
      args?: Subset<T, chatroomCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatroomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chatroom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatroomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatroomAggregateArgs>(args: Subset<T, ChatroomAggregateArgs>): PrismaPromise<GetChatroomAggregateType<T>>

    /**
     * Group by Chatroom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatroomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatroomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatroomGroupByArgs['orderBy'] }
        : { orderBy?: ChatroomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatroomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatroomGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chatroom.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chatroomClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    msgs<T extends messageFindManyArgs= {}>(args?: Subset<T, messageFindManyArgs>): PrismaPromise<Array<messageGetPayload<T>>| Null>;

    membership<T extends membershipFindManyArgs= {}>(args?: Subset<T, membershipFindManyArgs>): PrismaPromise<Array<membershipGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chatroom base type for findUnique actions
   */
  export type chatroomFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the chatroom
     * 
    **/
    select?: chatroomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: chatroomInclude | null
    /**
     * Filter, which chatroom to fetch.
     * 
    **/
    where: chatroomWhereUniqueInput
  }

  /**
   * chatroom: findUnique
   */
  export interface chatroomFindUniqueArgs extends chatroomFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chatroom base type for findFirst actions
   */
  export type chatroomFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the chatroom
     * 
    **/
    select?: chatroomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: chatroomInclude | null
    /**
     * Filter, which chatroom to fetch.
     * 
    **/
    where?: chatroomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chatrooms to fetch.
     * 
    **/
    orderBy?: Enumerable<chatroomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chatrooms.
     * 
    **/
    cursor?: chatroomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chatrooms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chatrooms.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chatrooms.
     * 
    **/
    distinct?: Enumerable<ChatroomScalarFieldEnum>
  }

  /**
   * chatroom: findFirst
   */
  export interface chatroomFindFirstArgs extends chatroomFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chatroom findMany
   */
  export type chatroomFindManyArgs = {
    /**
     * Select specific fields to fetch from the chatroom
     * 
    **/
    select?: chatroomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: chatroomInclude | null
    /**
     * Filter, which chatrooms to fetch.
     * 
    **/
    where?: chatroomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chatrooms to fetch.
     * 
    **/
    orderBy?: Enumerable<chatroomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chatrooms.
     * 
    **/
    cursor?: chatroomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chatrooms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chatrooms.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ChatroomScalarFieldEnum>
  }


  /**
   * chatroom create
   */
  export type chatroomCreateArgs = {
    /**
     * Select specific fields to fetch from the chatroom
     * 
    **/
    select?: chatroomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: chatroomInclude | null
    /**
     * The data needed to create a chatroom.
     * 
    **/
    data: XOR<chatroomCreateInput, chatroomUncheckedCreateInput>
  }


  /**
   * chatroom update
   */
  export type chatroomUpdateArgs = {
    /**
     * Select specific fields to fetch from the chatroom
     * 
    **/
    select?: chatroomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: chatroomInclude | null
    /**
     * The data needed to update a chatroom.
     * 
    **/
    data: XOR<chatroomUpdateInput, chatroomUncheckedUpdateInput>
    /**
     * Choose, which chatroom to update.
     * 
    **/
    where: chatroomWhereUniqueInput
  }


  /**
   * chatroom updateMany
   */
  export type chatroomUpdateManyArgs = {
    /**
     * The data used to update chatrooms.
     * 
    **/
    data: XOR<chatroomUpdateManyMutationInput, chatroomUncheckedUpdateManyInput>
    /**
     * Filter which chatrooms to update
     * 
    **/
    where?: chatroomWhereInput
  }


  /**
   * chatroom upsert
   */
  export type chatroomUpsertArgs = {
    /**
     * Select specific fields to fetch from the chatroom
     * 
    **/
    select?: chatroomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: chatroomInclude | null
    /**
     * The filter to search for the chatroom to update in case it exists.
     * 
    **/
    where: chatroomWhereUniqueInput
    /**
     * In case the chatroom found by the `where` argument doesn't exist, create a new chatroom with this data.
     * 
    **/
    create: XOR<chatroomCreateInput, chatroomUncheckedCreateInput>
    /**
     * In case the chatroom was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<chatroomUpdateInput, chatroomUncheckedUpdateInput>
  }


  /**
   * chatroom delete
   */
  export type chatroomDeleteArgs = {
    /**
     * Select specific fields to fetch from the chatroom
     * 
    **/
    select?: chatroomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: chatroomInclude | null
    /**
     * Filter which chatroom to delete.
     * 
    **/
    where: chatroomWhereUniqueInput
  }


  /**
   * chatroom deleteMany
   */
  export type chatroomDeleteManyArgs = {
    /**
     * Filter which chatrooms to delete
     * 
    **/
    where?: chatroomWhereInput
  }


  /**
   * chatroom: findUniqueOrThrow
   */
  export type chatroomFindUniqueOrThrowArgs = chatroomFindUniqueArgsBase
      

  /**
   * chatroom: findFirstOrThrow
   */
  export type chatroomFindFirstOrThrowArgs = chatroomFindFirstArgsBase
      

  /**
   * chatroom without action
   */
  export type chatroomArgs = {
    /**
     * Select specific fields to fetch from the chatroom
     * 
    **/
    select?: chatroomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: chatroomInclude | null
  }



  /**
   * Model message
   */


  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageAvgAggregateOutputType = {
    message_id: number | null
    author_id: number | null
    chat_id: number | null
  }

  export type MessageSumAggregateOutputType = {
    message_id: number | null
    author_id: number | null
    chat_id: number | null
  }

  export type MessageMinAggregateOutputType = {
    message_id: number | null
    content: string | null
    created_at: Date | null
    author_id: number | null
    chat_id: number | null
  }

  export type MessageMaxAggregateOutputType = {
    message_id: number | null
    content: string | null
    created_at: Date | null
    author_id: number | null
    chat_id: number | null
  }

  export type MessageCountAggregateOutputType = {
    message_id: number
    content: number
    created_at: number
    author_id: number
    chat_id: number
    _all: number
  }


  export type MessageAvgAggregateInputType = {
    message_id?: true
    author_id?: true
    chat_id?: true
  }

  export type MessageSumAggregateInputType = {
    message_id?: true
    author_id?: true
    chat_id?: true
  }

  export type MessageMinAggregateInputType = {
    message_id?: true
    content?: true
    created_at?: true
    author_id?: true
    chat_id?: true
  }

  export type MessageMaxAggregateInputType = {
    message_id?: true
    content?: true
    created_at?: true
    author_id?: true
    chat_id?: true
  }

  export type MessageCountAggregateInputType = {
    message_id?: true
    content?: true
    created_at?: true
    author_id?: true
    chat_id?: true
    _all?: true
  }

  export type MessageAggregateArgs = {
    /**
     * Filter which message to aggregate.
     * 
    **/
    where?: messageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of messages to fetch.
     * 
    **/
    orderBy?: Enumerable<messageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: messageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` messages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` messages.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs = {
    where?: messageWhereInput
    orderBy?: Enumerable<messageOrderByWithAggregationInput>
    by: Array<MessageScalarFieldEnum>
    having?: messageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _avg?: MessageAvgAggregateInputType
    _sum?: MessageSumAggregateInputType
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }


  export type MessageGroupByOutputType = {
    message_id: number
    content: string
    created_at: Date
    author_id: number
    chat_id: number
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = PrismaPromise<
    Array<
      PickArray<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type messageSelect = {
    message_id?: boolean
    content?: boolean
    created_at?: boolean
    author?: boolean | PlayerArgs
    author_id?: boolean
    created_in?: boolean | chatroomArgs
    chat_id?: boolean
  }


  export type messageInclude = {
    author?: boolean | PlayerArgs
    created_in?: boolean | chatroomArgs
  } 

  export type messageGetPayload<S extends boolean | null | undefined | messageArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? message :
    S extends undefined ? never :
    S extends { include: any } & (messageArgs | messageFindManyArgs)
    ? message  & {
    [P in TrueKeys<S['include']>]:
        P extends 'author' ? PlayerGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'created_in' ? chatroomGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (messageArgs | messageFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'author' ? PlayerGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'created_in' ? chatroomGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof message ? message[P] : never
  } 
      : message


  type messageCountArgs = Merge<
    Omit<messageFindManyArgs, 'select' | 'include'> & {
      select?: MessageCountAggregateInputType | true
    }
  >

  export interface messageDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Message that matches the filter.
     * @param {messageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends messageFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, messageFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'message'> extends True ? Prisma__messageClient<messageGetPayload<T>> : Prisma__messageClient<messageGetPayload<T> | null, null>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends messageFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, messageFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'message'> extends True ? Prisma__messageClient<messageGetPayload<T>> : Prisma__messageClient<messageGetPayload<T> | null, null>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `message_id`
     * const messageWithMessage_idOnly = await prisma.message.findMany({ select: { message_id: true } })
     * 
    **/
    findMany<T extends messageFindManyArgs>(
      args?: SelectSubset<T, messageFindManyArgs>
    ): PrismaPromise<Array<messageGetPayload<T>>>

    /**
     * Create a Message.
     * @param {messageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
    **/
    create<T extends messageCreateArgs>(
      args: SelectSubset<T, messageCreateArgs>
    ): Prisma__messageClient<messageGetPayload<T>>

    /**
     * Delete a Message.
     * @param {messageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
    **/
    delete<T extends messageDeleteArgs>(
      args: SelectSubset<T, messageDeleteArgs>
    ): Prisma__messageClient<messageGetPayload<T>>

    /**
     * Update one Message.
     * @param {messageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends messageUpdateArgs>(
      args: SelectSubset<T, messageUpdateArgs>
    ): Prisma__messageClient<messageGetPayload<T>>

    /**
     * Delete zero or more Messages.
     * @param {messageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends messageDeleteManyArgs>(
      args?: SelectSubset<T, messageDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends messageUpdateManyArgs>(
      args: SelectSubset<T, messageUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Message.
     * @param {messageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
    **/
    upsert<T extends messageUpsertArgs>(
      args: SelectSubset<T, messageUpsertArgs>
    ): Prisma__messageClient<messageGetPayload<T>>

    /**
     * Find one Message that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {messageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends messageFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, messageFindUniqueOrThrowArgs>
    ): Prisma__messageClient<messageGetPayload<T>>

    /**
     * Find the first Message that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends messageFindFirstOrThrowArgs>(
      args?: SelectSubset<T, messageFindFirstOrThrowArgs>
    ): Prisma__messageClient<messageGetPayload<T>>

    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends messageCountArgs>(
      args?: Subset<T, messageCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__messageClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    author<T extends PlayerArgs= {}>(args?: Subset<T, PlayerArgs>): Prisma__PlayerClient<PlayerGetPayload<T> | Null>;

    created_in<T extends chatroomArgs= {}>(args?: Subset<T, chatroomArgs>): Prisma__chatroomClient<chatroomGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * message base type for findUnique actions
   */
  export type messageFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the message
     * 
    **/
    select?: messageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: messageInclude | null
    /**
     * Filter, which message to fetch.
     * 
    **/
    where: messageWhereUniqueInput
  }

  /**
   * message: findUnique
   */
  export interface messageFindUniqueArgs extends messageFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * message base type for findFirst actions
   */
  export type messageFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the message
     * 
    **/
    select?: messageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: messageInclude | null
    /**
     * Filter, which message to fetch.
     * 
    **/
    where?: messageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of messages to fetch.
     * 
    **/
    orderBy?: Enumerable<messageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for messages.
     * 
    **/
    cursor?: messageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` messages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` messages.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of messages.
     * 
    **/
    distinct?: Enumerable<MessageScalarFieldEnum>
  }

  /**
   * message: findFirst
   */
  export interface messageFindFirstArgs extends messageFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * message findMany
   */
  export type messageFindManyArgs = {
    /**
     * Select specific fields to fetch from the message
     * 
    **/
    select?: messageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: messageInclude | null
    /**
     * Filter, which messages to fetch.
     * 
    **/
    where?: messageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of messages to fetch.
     * 
    **/
    orderBy?: Enumerable<messageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing messages.
     * 
    **/
    cursor?: messageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` messages from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` messages.
     * 
    **/
    skip?: number
    distinct?: Enumerable<MessageScalarFieldEnum>
  }


  /**
   * message create
   */
  export type messageCreateArgs = {
    /**
     * Select specific fields to fetch from the message
     * 
    **/
    select?: messageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: messageInclude | null
    /**
     * The data needed to create a message.
     * 
    **/
    data: XOR<messageCreateInput, messageUncheckedCreateInput>
  }


  /**
   * message update
   */
  export type messageUpdateArgs = {
    /**
     * Select specific fields to fetch from the message
     * 
    **/
    select?: messageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: messageInclude | null
    /**
     * The data needed to update a message.
     * 
    **/
    data: XOR<messageUpdateInput, messageUncheckedUpdateInput>
    /**
     * Choose, which message to update.
     * 
    **/
    where: messageWhereUniqueInput
  }


  /**
   * message updateMany
   */
  export type messageUpdateManyArgs = {
    /**
     * The data used to update messages.
     * 
    **/
    data: XOR<messageUpdateManyMutationInput, messageUncheckedUpdateManyInput>
    /**
     * Filter which messages to update
     * 
    **/
    where?: messageWhereInput
  }


  /**
   * message upsert
   */
  export type messageUpsertArgs = {
    /**
     * Select specific fields to fetch from the message
     * 
    **/
    select?: messageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: messageInclude | null
    /**
     * The filter to search for the message to update in case it exists.
     * 
    **/
    where: messageWhereUniqueInput
    /**
     * In case the message found by the `where` argument doesn't exist, create a new message with this data.
     * 
    **/
    create: XOR<messageCreateInput, messageUncheckedCreateInput>
    /**
     * In case the message was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<messageUpdateInput, messageUncheckedUpdateInput>
  }


  /**
   * message delete
   */
  export type messageDeleteArgs = {
    /**
     * Select specific fields to fetch from the message
     * 
    **/
    select?: messageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: messageInclude | null
    /**
     * Filter which message to delete.
     * 
    **/
    where: messageWhereUniqueInput
  }


  /**
   * message deleteMany
   */
  export type messageDeleteManyArgs = {
    /**
     * Filter which messages to delete
     * 
    **/
    where?: messageWhereInput
  }


  /**
   * message: findUniqueOrThrow
   */
  export type messageFindUniqueOrThrowArgs = messageFindUniqueArgsBase
      

  /**
   * message: findFirstOrThrow
   */
  export type messageFindFirstOrThrowArgs = messageFindFirstArgsBase
      

  /**
   * message without action
   */
  export type messageArgs = {
    /**
     * Select specific fields to fetch from the message
     * 
    **/
    select?: messageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: messageInclude | null
  }



  /**
   * Model membership
   */


  export type AggregateMembership = {
    _count: MembershipCountAggregateOutputType | null
    _avg: MembershipAvgAggregateOutputType | null
    _sum: MembershipSumAggregateOutputType | null
    _min: MembershipMinAggregateOutputType | null
    _max: MembershipMaxAggregateOutputType | null
  }

  export type MembershipAvgAggregateOutputType = {
    id_membership: number | null
    player_id: number | null
    chat_id: number | null
  }

  export type MembershipSumAggregateOutputType = {
    id_membership: number | null
    player_id: number | null
    chat_id: number | null
  }

  export type MembershipMinAggregateOutputType = {
    id_membership: number | null
    player_id: number | null
    chat_id: number | null
    rool: string | null
  }

  export type MembershipMaxAggregateOutputType = {
    id_membership: number | null
    player_id: number | null
    chat_id: number | null
    rool: string | null
  }

  export type MembershipCountAggregateOutputType = {
    id_membership: number
    player_id: number
    chat_id: number
    rool: number
    _all: number
  }


  export type MembershipAvgAggregateInputType = {
    id_membership?: true
    player_id?: true
    chat_id?: true
  }

  export type MembershipSumAggregateInputType = {
    id_membership?: true
    player_id?: true
    chat_id?: true
  }

  export type MembershipMinAggregateInputType = {
    id_membership?: true
    player_id?: true
    chat_id?: true
    rool?: true
  }

  export type MembershipMaxAggregateInputType = {
    id_membership?: true
    player_id?: true
    chat_id?: true
    rool?: true
  }

  export type MembershipCountAggregateInputType = {
    id_membership?: true
    player_id?: true
    chat_id?: true
    rool?: true
    _all?: true
  }

  export type MembershipAggregateArgs = {
    /**
     * Filter which membership to aggregate.
     * 
    **/
    where?: membershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of memberships to fetch.
     * 
    **/
    orderBy?: Enumerable<membershipOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: membershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` memberships from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` memberships.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned memberships
    **/
    _count?: true | MembershipCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MembershipAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MembershipSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MembershipMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MembershipMaxAggregateInputType
  }

  export type GetMembershipAggregateType<T extends MembershipAggregateArgs> = {
        [P in keyof T & keyof AggregateMembership]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMembership[P]>
      : GetScalarType<T[P], AggregateMembership[P]>
  }




  export type MembershipGroupByArgs = {
    where?: membershipWhereInput
    orderBy?: Enumerable<membershipOrderByWithAggregationInput>
    by: Array<MembershipScalarFieldEnum>
    having?: membershipScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MembershipCountAggregateInputType | true
    _avg?: MembershipAvgAggregateInputType
    _sum?: MembershipSumAggregateInputType
    _min?: MembershipMinAggregateInputType
    _max?: MembershipMaxAggregateInputType
  }


  export type MembershipGroupByOutputType = {
    id_membership: number
    player_id: number
    chat_id: number
    rool: string
    _count: MembershipCountAggregateOutputType | null
    _avg: MembershipAvgAggregateOutputType | null
    _sum: MembershipSumAggregateOutputType | null
    _min: MembershipMinAggregateOutputType | null
    _max: MembershipMaxAggregateOutputType | null
  }

  type GetMembershipGroupByPayload<T extends MembershipGroupByArgs> = PrismaPromise<
    Array<
      PickArray<MembershipGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MembershipGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MembershipGroupByOutputType[P]>
            : GetScalarType<T[P], MembershipGroupByOutputType[P]>
        }
      >
    >


  export type membershipSelect = {
    id_membership?: boolean
    player?: boolean | PlayerArgs
    player_id?: boolean
    chatroom?: boolean | chatroomArgs
    chat_id?: boolean
    rool?: boolean
  }


  export type membershipInclude = {
    player?: boolean | PlayerArgs
    chatroom?: boolean | chatroomArgs
  } 

  export type membershipGetPayload<S extends boolean | null | undefined | membershipArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? membership :
    S extends undefined ? never :
    S extends { include: any } & (membershipArgs | membershipFindManyArgs)
    ? membership  & {
    [P in TrueKeys<S['include']>]:
        P extends 'player' ? PlayerGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'chatroom' ? chatroomGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (membershipArgs | membershipFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'player' ? PlayerGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'chatroom' ? chatroomGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof membership ? membership[P] : never
  } 
      : membership


  type membershipCountArgs = Merge<
    Omit<membershipFindManyArgs, 'select' | 'include'> & {
      select?: MembershipCountAggregateInputType | true
    }
  >

  export interface membershipDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Membership that matches the filter.
     * @param {membershipFindUniqueArgs} args - Arguments to find a Membership
     * @example
     * // Get one Membership
     * const membership = await prisma.membership.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends membershipFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, membershipFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'membership'> extends True ? Prisma__membershipClient<membershipGetPayload<T>> : Prisma__membershipClient<membershipGetPayload<T> | null, null>

    /**
     * Find the first Membership that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {membershipFindFirstArgs} args - Arguments to find a Membership
     * @example
     * // Get one Membership
     * const membership = await prisma.membership.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends membershipFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, membershipFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'membership'> extends True ? Prisma__membershipClient<membershipGetPayload<T>> : Prisma__membershipClient<membershipGetPayload<T> | null, null>

    /**
     * Find zero or more Memberships that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {membershipFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Memberships
     * const memberships = await prisma.membership.findMany()
     * 
     * // Get first 10 Memberships
     * const memberships = await prisma.membership.findMany({ take: 10 })
     * 
     * // Only select the `id_membership`
     * const membershipWithId_membershipOnly = await prisma.membership.findMany({ select: { id_membership: true } })
     * 
    **/
    findMany<T extends membershipFindManyArgs>(
      args?: SelectSubset<T, membershipFindManyArgs>
    ): PrismaPromise<Array<membershipGetPayload<T>>>

    /**
     * Create a Membership.
     * @param {membershipCreateArgs} args - Arguments to create a Membership.
     * @example
     * // Create one Membership
     * const Membership = await prisma.membership.create({
     *   data: {
     *     // ... data to create a Membership
     *   }
     * })
     * 
    **/
    create<T extends membershipCreateArgs>(
      args: SelectSubset<T, membershipCreateArgs>
    ): Prisma__membershipClient<membershipGetPayload<T>>

    /**
     * Delete a Membership.
     * @param {membershipDeleteArgs} args - Arguments to delete one Membership.
     * @example
     * // Delete one Membership
     * const Membership = await prisma.membership.delete({
     *   where: {
     *     // ... filter to delete one Membership
     *   }
     * })
     * 
    **/
    delete<T extends membershipDeleteArgs>(
      args: SelectSubset<T, membershipDeleteArgs>
    ): Prisma__membershipClient<membershipGetPayload<T>>

    /**
     * Update one Membership.
     * @param {membershipUpdateArgs} args - Arguments to update one Membership.
     * @example
     * // Update one Membership
     * const membership = await prisma.membership.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends membershipUpdateArgs>(
      args: SelectSubset<T, membershipUpdateArgs>
    ): Prisma__membershipClient<membershipGetPayload<T>>

    /**
     * Delete zero or more Memberships.
     * @param {membershipDeleteManyArgs} args - Arguments to filter Memberships to delete.
     * @example
     * // Delete a few Memberships
     * const { count } = await prisma.membership.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends membershipDeleteManyArgs>(
      args?: SelectSubset<T, membershipDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Memberships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {membershipUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Memberships
     * const membership = await prisma.membership.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends membershipUpdateManyArgs>(
      args: SelectSubset<T, membershipUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Membership.
     * @param {membershipUpsertArgs} args - Arguments to update or create a Membership.
     * @example
     * // Update or create a Membership
     * const membership = await prisma.membership.upsert({
     *   create: {
     *     // ... data to create a Membership
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Membership we want to update
     *   }
     * })
    **/
    upsert<T extends membershipUpsertArgs>(
      args: SelectSubset<T, membershipUpsertArgs>
    ): Prisma__membershipClient<membershipGetPayload<T>>

    /**
     * Find one Membership that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {membershipFindUniqueOrThrowArgs} args - Arguments to find a Membership
     * @example
     * // Get one Membership
     * const membership = await prisma.membership.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends membershipFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, membershipFindUniqueOrThrowArgs>
    ): Prisma__membershipClient<membershipGetPayload<T>>

    /**
     * Find the first Membership that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {membershipFindFirstOrThrowArgs} args - Arguments to find a Membership
     * @example
     * // Get one Membership
     * const membership = await prisma.membership.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends membershipFindFirstOrThrowArgs>(
      args?: SelectSubset<T, membershipFindFirstOrThrowArgs>
    ): Prisma__membershipClient<membershipGetPayload<T>>

    /**
     * Count the number of Memberships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {membershipCountArgs} args - Arguments to filter Memberships to count.
     * @example
     * // Count the number of Memberships
     * const count = await prisma.membership.count({
     *   where: {
     *     // ... the filter for the Memberships we want to count
     *   }
     * })
    **/
    count<T extends membershipCountArgs>(
      args?: Subset<T, membershipCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MembershipCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Membership.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembershipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MembershipAggregateArgs>(args: Subset<T, MembershipAggregateArgs>): PrismaPromise<GetMembershipAggregateType<T>>

    /**
     * Group by Membership.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembershipGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MembershipGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MembershipGroupByArgs['orderBy'] }
        : { orderBy?: MembershipGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MembershipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMembershipGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for membership.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__membershipClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    player<T extends PlayerArgs= {}>(args?: Subset<T, PlayerArgs>): Prisma__PlayerClient<PlayerGetPayload<T> | Null>;

    chatroom<T extends chatroomArgs= {}>(args?: Subset<T, chatroomArgs>): Prisma__chatroomClient<chatroomGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * membership base type for findUnique actions
   */
  export type membershipFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the membership
     * 
    **/
    select?: membershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: membershipInclude | null
    /**
     * Filter, which membership to fetch.
     * 
    **/
    where: membershipWhereUniqueInput
  }

  /**
   * membership: findUnique
   */
  export interface membershipFindUniqueArgs extends membershipFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * membership base type for findFirst actions
   */
  export type membershipFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the membership
     * 
    **/
    select?: membershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: membershipInclude | null
    /**
     * Filter, which membership to fetch.
     * 
    **/
    where?: membershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of memberships to fetch.
     * 
    **/
    orderBy?: Enumerable<membershipOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for memberships.
     * 
    **/
    cursor?: membershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` memberships from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` memberships.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of memberships.
     * 
    **/
    distinct?: Enumerable<MembershipScalarFieldEnum>
  }

  /**
   * membership: findFirst
   */
  export interface membershipFindFirstArgs extends membershipFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * membership findMany
   */
  export type membershipFindManyArgs = {
    /**
     * Select specific fields to fetch from the membership
     * 
    **/
    select?: membershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: membershipInclude | null
    /**
     * Filter, which memberships to fetch.
     * 
    **/
    where?: membershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of memberships to fetch.
     * 
    **/
    orderBy?: Enumerable<membershipOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing memberships.
     * 
    **/
    cursor?: membershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` memberships from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` memberships.
     * 
    **/
    skip?: number
    distinct?: Enumerable<MembershipScalarFieldEnum>
  }


  /**
   * membership create
   */
  export type membershipCreateArgs = {
    /**
     * Select specific fields to fetch from the membership
     * 
    **/
    select?: membershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: membershipInclude | null
    /**
     * The data needed to create a membership.
     * 
    **/
    data: XOR<membershipCreateInput, membershipUncheckedCreateInput>
  }


  /**
   * membership update
   */
  export type membershipUpdateArgs = {
    /**
     * Select specific fields to fetch from the membership
     * 
    **/
    select?: membershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: membershipInclude | null
    /**
     * The data needed to update a membership.
     * 
    **/
    data: XOR<membershipUpdateInput, membershipUncheckedUpdateInput>
    /**
     * Choose, which membership to update.
     * 
    **/
    where: membershipWhereUniqueInput
  }


  /**
   * membership updateMany
   */
  export type membershipUpdateManyArgs = {
    /**
     * The data used to update memberships.
     * 
    **/
    data: XOR<membershipUpdateManyMutationInput, membershipUncheckedUpdateManyInput>
    /**
     * Filter which memberships to update
     * 
    **/
    where?: membershipWhereInput
  }


  /**
   * membership upsert
   */
  export type membershipUpsertArgs = {
    /**
     * Select specific fields to fetch from the membership
     * 
    **/
    select?: membershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: membershipInclude | null
    /**
     * The filter to search for the membership to update in case it exists.
     * 
    **/
    where: membershipWhereUniqueInput
    /**
     * In case the membership found by the `where` argument doesn't exist, create a new membership with this data.
     * 
    **/
    create: XOR<membershipCreateInput, membershipUncheckedCreateInput>
    /**
     * In case the membership was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<membershipUpdateInput, membershipUncheckedUpdateInput>
  }


  /**
   * membership delete
   */
  export type membershipDeleteArgs = {
    /**
     * Select specific fields to fetch from the membership
     * 
    **/
    select?: membershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: membershipInclude | null
    /**
     * Filter which membership to delete.
     * 
    **/
    where: membershipWhereUniqueInput
  }


  /**
   * membership deleteMany
   */
  export type membershipDeleteManyArgs = {
    /**
     * Filter which memberships to delete
     * 
    **/
    where?: membershipWhereInput
  }


  /**
   * membership: findUniqueOrThrow
   */
  export type membershipFindUniqueOrThrowArgs = membershipFindUniqueArgsBase
      

  /**
   * membership: findFirstOrThrow
   */
  export type membershipFindFirstOrThrowArgs = membershipFindFirstArgsBase
      

  /**
   * membership without action
   */
  export type membershipArgs = {
    /**
     * Select specific fields to fetch from the membership
     * 
    **/
    select?: membershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: membershipInclude | null
  }



  /**
   * Model relation
   */


  export type AggregateRelation = {
    _count: RelationCountAggregateOutputType | null
    _avg: RelationAvgAggregateOutputType | null
    _sum: RelationSumAggregateOutputType | null
    _min: RelationMinAggregateOutputType | null
    _max: RelationMaxAggregateOutputType | null
  }

  export type RelationAvgAggregateOutputType = {
    id_relation: number | null
    player1_id: number | null
    player2_id: number | null
  }

  export type RelationSumAggregateOutputType = {
    id_relation: number | null
    player1_id: number | null
    player2_id: number | null
  }

  export type RelationMinAggregateOutputType = {
    id_relation: number | null
    player1_id: number | null
    player2_id: number | null
    status: string | null
  }

  export type RelationMaxAggregateOutputType = {
    id_relation: number | null
    player1_id: number | null
    player2_id: number | null
    status: string | null
  }

  export type RelationCountAggregateOutputType = {
    id_relation: number
    player1_id: number
    player2_id: number
    status: number
    _all: number
  }


  export type RelationAvgAggregateInputType = {
    id_relation?: true
    player1_id?: true
    player2_id?: true
  }

  export type RelationSumAggregateInputType = {
    id_relation?: true
    player1_id?: true
    player2_id?: true
  }

  export type RelationMinAggregateInputType = {
    id_relation?: true
    player1_id?: true
    player2_id?: true
    status?: true
  }

  export type RelationMaxAggregateInputType = {
    id_relation?: true
    player1_id?: true
    player2_id?: true
    status?: true
  }

  export type RelationCountAggregateInputType = {
    id_relation?: true
    player1_id?: true
    player2_id?: true
    status?: true
    _all?: true
  }

  export type RelationAggregateArgs = {
    /**
     * Filter which relation to aggregate.
     * 
    **/
    where?: relationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of relations to fetch.
     * 
    **/
    orderBy?: Enumerable<relationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: relationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` relations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` relations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned relations
    **/
    _count?: true | RelationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RelationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RelationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RelationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RelationMaxAggregateInputType
  }

  export type GetRelationAggregateType<T extends RelationAggregateArgs> = {
        [P in keyof T & keyof AggregateRelation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRelation[P]>
      : GetScalarType<T[P], AggregateRelation[P]>
  }




  export type RelationGroupByArgs = {
    where?: relationWhereInput
    orderBy?: Enumerable<relationOrderByWithAggregationInput>
    by: Array<RelationScalarFieldEnum>
    having?: relationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RelationCountAggregateInputType | true
    _avg?: RelationAvgAggregateInputType
    _sum?: RelationSumAggregateInputType
    _min?: RelationMinAggregateInputType
    _max?: RelationMaxAggregateInputType
  }


  export type RelationGroupByOutputType = {
    id_relation: number
    player1_id: number
    player2_id: number
    status: string
    _count: RelationCountAggregateOutputType | null
    _avg: RelationAvgAggregateOutputType | null
    _sum: RelationSumAggregateOutputType | null
    _min: RelationMinAggregateOutputType | null
    _max: RelationMaxAggregateOutputType | null
  }

  type GetRelationGroupByPayload<T extends RelationGroupByArgs> = PrismaPromise<
    Array<
      PickArray<RelationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RelationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RelationGroupByOutputType[P]>
            : GetScalarType<T[P], RelationGroupByOutputType[P]>
        }
      >
    >


  export type relationSelect = {
    id_relation?: boolean
    player1?: boolean | PlayerArgs
    player1_id?: boolean
    player2?: boolean | PlayerArgs
    player2_id?: boolean
    status?: boolean
  }


  export type relationInclude = {
    player1?: boolean | PlayerArgs
    player2?: boolean | PlayerArgs
  } 

  export type relationGetPayload<S extends boolean | null | undefined | relationArgs, U = keyof S> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? relation :
    S extends undefined ? never :
    S extends { include: any } & (relationArgs | relationFindManyArgs)
    ? relation  & {
    [P in TrueKeys<S['include']>]:
        P extends 'player1' ? PlayerGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'player2' ? PlayerGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : S extends { select: any } & (relationArgs | relationFindManyArgs)
      ? {
    [P in TrueKeys<S['select']>]:
        P extends 'player1' ? PlayerGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'player2' ? PlayerGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof relation ? relation[P] : never
  } 
      : relation


  type relationCountArgs = Merge<
    Omit<relationFindManyArgs, 'select' | 'include'> & {
      select?: RelationCountAggregateInputType | true
    }
  >

  export interface relationDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Relation that matches the filter.
     * @param {relationFindUniqueArgs} args - Arguments to find a Relation
     * @example
     * // Get one Relation
     * const relation = await prisma.relation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends relationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, relationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'relation'> extends True ? Prisma__relationClient<relationGetPayload<T>> : Prisma__relationClient<relationGetPayload<T> | null, null>

    /**
     * Find the first Relation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {relationFindFirstArgs} args - Arguments to find a Relation
     * @example
     * // Get one Relation
     * const relation = await prisma.relation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends relationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, relationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'relation'> extends True ? Prisma__relationClient<relationGetPayload<T>> : Prisma__relationClient<relationGetPayload<T> | null, null>

    /**
     * Find zero or more Relations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {relationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Relations
     * const relations = await prisma.relation.findMany()
     * 
     * // Get first 10 Relations
     * const relations = await prisma.relation.findMany({ take: 10 })
     * 
     * // Only select the `id_relation`
     * const relationWithId_relationOnly = await prisma.relation.findMany({ select: { id_relation: true } })
     * 
    **/
    findMany<T extends relationFindManyArgs>(
      args?: SelectSubset<T, relationFindManyArgs>
    ): PrismaPromise<Array<relationGetPayload<T>>>

    /**
     * Create a Relation.
     * @param {relationCreateArgs} args - Arguments to create a Relation.
     * @example
     * // Create one Relation
     * const Relation = await prisma.relation.create({
     *   data: {
     *     // ... data to create a Relation
     *   }
     * })
     * 
    **/
    create<T extends relationCreateArgs>(
      args: SelectSubset<T, relationCreateArgs>
    ): Prisma__relationClient<relationGetPayload<T>>

    /**
     * Delete a Relation.
     * @param {relationDeleteArgs} args - Arguments to delete one Relation.
     * @example
     * // Delete one Relation
     * const Relation = await prisma.relation.delete({
     *   where: {
     *     // ... filter to delete one Relation
     *   }
     * })
     * 
    **/
    delete<T extends relationDeleteArgs>(
      args: SelectSubset<T, relationDeleteArgs>
    ): Prisma__relationClient<relationGetPayload<T>>

    /**
     * Update one Relation.
     * @param {relationUpdateArgs} args - Arguments to update one Relation.
     * @example
     * // Update one Relation
     * const relation = await prisma.relation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends relationUpdateArgs>(
      args: SelectSubset<T, relationUpdateArgs>
    ): Prisma__relationClient<relationGetPayload<T>>

    /**
     * Delete zero or more Relations.
     * @param {relationDeleteManyArgs} args - Arguments to filter Relations to delete.
     * @example
     * // Delete a few Relations
     * const { count } = await prisma.relation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends relationDeleteManyArgs>(
      args?: SelectSubset<T, relationDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Relations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {relationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Relations
     * const relation = await prisma.relation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends relationUpdateManyArgs>(
      args: SelectSubset<T, relationUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Relation.
     * @param {relationUpsertArgs} args - Arguments to update or create a Relation.
     * @example
     * // Update or create a Relation
     * const relation = await prisma.relation.upsert({
     *   create: {
     *     // ... data to create a Relation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Relation we want to update
     *   }
     * })
    **/
    upsert<T extends relationUpsertArgs>(
      args: SelectSubset<T, relationUpsertArgs>
    ): Prisma__relationClient<relationGetPayload<T>>

    /**
     * Find one Relation that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {relationFindUniqueOrThrowArgs} args - Arguments to find a Relation
     * @example
     * // Get one Relation
     * const relation = await prisma.relation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends relationFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, relationFindUniqueOrThrowArgs>
    ): Prisma__relationClient<relationGetPayload<T>>

    /**
     * Find the first Relation that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {relationFindFirstOrThrowArgs} args - Arguments to find a Relation
     * @example
     * // Get one Relation
     * const relation = await prisma.relation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends relationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, relationFindFirstOrThrowArgs>
    ): Prisma__relationClient<relationGetPayload<T>>

    /**
     * Count the number of Relations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {relationCountArgs} args - Arguments to filter Relations to count.
     * @example
     * // Count the number of Relations
     * const count = await prisma.relation.count({
     *   where: {
     *     // ... the filter for the Relations we want to count
     *   }
     * })
    **/
    count<T extends relationCountArgs>(
      args?: Subset<T, relationCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RelationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Relation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RelationAggregateArgs>(args: Subset<T, RelationAggregateArgs>): PrismaPromise<GetRelationAggregateType<T>>

    /**
     * Group by Relation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RelationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RelationGroupByArgs['orderBy'] }
        : { orderBy?: RelationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RelationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRelationGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for relation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__relationClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    player1<T extends PlayerArgs= {}>(args?: Subset<T, PlayerArgs>): Prisma__PlayerClient<PlayerGetPayload<T> | Null>;

    player2<T extends PlayerArgs= {}>(args?: Subset<T, PlayerArgs>): Prisma__PlayerClient<PlayerGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * relation base type for findUnique actions
   */
  export type relationFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the relation
     * 
    **/
    select?: relationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: relationInclude | null
    /**
     * Filter, which relation to fetch.
     * 
    **/
    where: relationWhereUniqueInput
  }

  /**
   * relation: findUnique
   */
  export interface relationFindUniqueArgs extends relationFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * relation base type for findFirst actions
   */
  export type relationFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the relation
     * 
    **/
    select?: relationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: relationInclude | null
    /**
     * Filter, which relation to fetch.
     * 
    **/
    where?: relationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of relations to fetch.
     * 
    **/
    orderBy?: Enumerable<relationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for relations.
     * 
    **/
    cursor?: relationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` relations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` relations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of relations.
     * 
    **/
    distinct?: Enumerable<RelationScalarFieldEnum>
  }

  /**
   * relation: findFirst
   */
  export interface relationFindFirstArgs extends relationFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * relation findMany
   */
  export type relationFindManyArgs = {
    /**
     * Select specific fields to fetch from the relation
     * 
    **/
    select?: relationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: relationInclude | null
    /**
     * Filter, which relations to fetch.
     * 
    **/
    where?: relationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of relations to fetch.
     * 
    **/
    orderBy?: Enumerable<relationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing relations.
     * 
    **/
    cursor?: relationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` relations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` relations.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RelationScalarFieldEnum>
  }


  /**
   * relation create
   */
  export type relationCreateArgs = {
    /**
     * Select specific fields to fetch from the relation
     * 
    **/
    select?: relationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: relationInclude | null
    /**
     * The data needed to create a relation.
     * 
    **/
    data: XOR<relationCreateInput, relationUncheckedCreateInput>
  }


  /**
   * relation update
   */
  export type relationUpdateArgs = {
    /**
     * Select specific fields to fetch from the relation
     * 
    **/
    select?: relationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: relationInclude | null
    /**
     * The data needed to update a relation.
     * 
    **/
    data: XOR<relationUpdateInput, relationUncheckedUpdateInput>
    /**
     * Choose, which relation to update.
     * 
    **/
    where: relationWhereUniqueInput
  }


  /**
   * relation updateMany
   */
  export type relationUpdateManyArgs = {
    /**
     * The data used to update relations.
     * 
    **/
    data: XOR<relationUpdateManyMutationInput, relationUncheckedUpdateManyInput>
    /**
     * Filter which relations to update
     * 
    **/
    where?: relationWhereInput
  }


  /**
   * relation upsert
   */
  export type relationUpsertArgs = {
    /**
     * Select specific fields to fetch from the relation
     * 
    **/
    select?: relationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: relationInclude | null
    /**
     * The filter to search for the relation to update in case it exists.
     * 
    **/
    where: relationWhereUniqueInput
    /**
     * In case the relation found by the `where` argument doesn't exist, create a new relation with this data.
     * 
    **/
    create: XOR<relationCreateInput, relationUncheckedCreateInput>
    /**
     * In case the relation was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<relationUpdateInput, relationUncheckedUpdateInput>
  }


  /**
   * relation delete
   */
  export type relationDeleteArgs = {
    /**
     * Select specific fields to fetch from the relation
     * 
    **/
    select?: relationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: relationInclude | null
    /**
     * Filter which relation to delete.
     * 
    **/
    where: relationWhereUniqueInput
  }


  /**
   * relation deleteMany
   */
  export type relationDeleteManyArgs = {
    /**
     * Filter which relations to delete
     * 
    **/
    where?: relationWhereInput
  }


  /**
   * relation: findUniqueOrThrow
   */
  export type relationFindUniqueOrThrowArgs = relationFindUniqueArgsBase
      

  /**
   * relation: findFirstOrThrow
   */
  export type relationFindFirstOrThrowArgs = relationFindFirstArgsBase
      

  /**
   * relation without action
   */
  export type relationArgs = {
    /**
     * Select specific fields to fetch from the relation
     * 
    **/
    select?: relationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: relationInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ChatroomScalarFieldEnum: {
    chat_room_id: 'chat_room_id',
    name: 'name',
    ischannel: 'ischannel',
    ispublic: 'ispublic',
    password: 'password',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ChatroomScalarFieldEnum = (typeof ChatroomScalarFieldEnum)[keyof typeof ChatroomScalarFieldEnum]


  export const Game_historyScalarFieldEnum: {
    id_game_history: 'id_game_history',
    winner_id: 'winner_id',
    winner_scoor: 'winner_scoor',
    looser_id: 'looser_id',
    losser_scoor: 'losser_scoor',
    created_at: 'created_at'
  };

  export type Game_historyScalarFieldEnum = (typeof Game_historyScalarFieldEnum)[keyof typeof Game_historyScalarFieldEnum]


  export const MembershipScalarFieldEnum: {
    id_membership: 'id_membership',
    player_id: 'player_id',
    chat_id: 'chat_id',
    rool: 'rool'
  };

  export type MembershipScalarFieldEnum = (typeof MembershipScalarFieldEnum)[keyof typeof MembershipScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    message_id: 'message_id',
    content: 'content',
    created_at: 'created_at',
    author_id: 'author_id',
    chat_id: 'chat_id'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const PlayerScalarFieldEnum: {
    player_id: 'player_id',
    username: 'username',
    avatar: 'avatar',
    is_playing: 'is_playing',
    wines: 'wines',
    loses: 'loses',
    authentification_token: 'authentification_token'
  };

  export type PlayerScalarFieldEnum = (typeof PlayerScalarFieldEnum)[keyof typeof PlayerScalarFieldEnum]


  export const RelationScalarFieldEnum: {
    id_relation: 'id_relation',
    player1_id: 'player1_id',
    player2_id: 'player2_id',
    status: 'status'
  };

  export type RelationScalarFieldEnum = (typeof RelationScalarFieldEnum)[keyof typeof RelationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  /**
   * Deep Input Types
   */


  export type PlayerWhereInput = {
    AND?: Enumerable<PlayerWhereInput>
    OR?: Enumerable<PlayerWhereInput>
    NOT?: Enumerable<PlayerWhereInput>
    player_id?: IntFilter | number
    username?: StringFilter | string
    avatar?: StringFilter | string
    is_playing?: BoolFilter | boolean
    wines?: IntFilter | number
    loses?: IntFilter | number
    authentification_token?: StringFilter | string
    game_winned?: Game_historyListRelationFilter
    game_losed?: Game_historyListRelationFilter
    msgs?: MessageListRelationFilter
    membership?: MembershipListRelationFilter
    relation_from?: RelationListRelationFilter
    relation_too?: RelationListRelationFilter
  }

  export type PlayerOrderByWithRelationInput = {
    player_id?: SortOrder
    username?: SortOrder
    avatar?: SortOrder
    is_playing?: SortOrder
    wines?: SortOrder
    loses?: SortOrder
    authentification_token?: SortOrder
    game_winned?: game_historyOrderByRelationAggregateInput
    game_losed?: game_historyOrderByRelationAggregateInput
    msgs?: messageOrderByRelationAggregateInput
    membership?: membershipOrderByRelationAggregateInput
    relation_from?: relationOrderByRelationAggregateInput
    relation_too?: relationOrderByRelationAggregateInput
  }

  export type PlayerWhereUniqueInput = {
    player_id?: number
    username?: string
    authentification_token?: string
  }

  export type PlayerOrderByWithAggregationInput = {
    player_id?: SortOrder
    username?: SortOrder
    avatar?: SortOrder
    is_playing?: SortOrder
    wines?: SortOrder
    loses?: SortOrder
    authentification_token?: SortOrder
    _count?: PlayerCountOrderByAggregateInput
    _avg?: PlayerAvgOrderByAggregateInput
    _max?: PlayerMaxOrderByAggregateInput
    _min?: PlayerMinOrderByAggregateInput
    _sum?: PlayerSumOrderByAggregateInput
  }

  export type PlayerScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PlayerScalarWhereWithAggregatesInput>
    OR?: Enumerable<PlayerScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PlayerScalarWhereWithAggregatesInput>
    player_id?: IntWithAggregatesFilter | number
    username?: StringWithAggregatesFilter | string
    avatar?: StringWithAggregatesFilter | string
    is_playing?: BoolWithAggregatesFilter | boolean
    wines?: IntWithAggregatesFilter | number
    loses?: IntWithAggregatesFilter | number
    authentification_token?: StringWithAggregatesFilter | string
  }

  export type game_historyWhereInput = {
    AND?: Enumerable<game_historyWhereInput>
    OR?: Enumerable<game_historyWhereInput>
    NOT?: Enumerable<game_historyWhereInput>
    id_game_history?: IntFilter | number
    winner?: XOR<PlayerRelationFilter, PlayerWhereInput>
    winner_id?: IntFilter | number
    winner_scoor?: IntFilter | number
    looser?: XOR<PlayerRelationFilter, PlayerWhereInput>
    looser_id?: IntFilter | number
    losser_scoor?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
  }

  export type game_historyOrderByWithRelationInput = {
    id_game_history?: SortOrder
    winner?: PlayerOrderByWithRelationInput
    winner_id?: SortOrder
    winner_scoor?: SortOrder
    looser?: PlayerOrderByWithRelationInput
    looser_id?: SortOrder
    losser_scoor?: SortOrder
    created_at?: SortOrder
  }

  export type game_historyWhereUniqueInput = {
    id_game_history?: number
  }

  export type game_historyOrderByWithAggregationInput = {
    id_game_history?: SortOrder
    winner_id?: SortOrder
    winner_scoor?: SortOrder
    looser_id?: SortOrder
    losser_scoor?: SortOrder
    created_at?: SortOrder
    _count?: game_historyCountOrderByAggregateInput
    _avg?: game_historyAvgOrderByAggregateInput
    _max?: game_historyMaxOrderByAggregateInput
    _min?: game_historyMinOrderByAggregateInput
    _sum?: game_historySumOrderByAggregateInput
  }

  export type game_historyScalarWhereWithAggregatesInput = {
    AND?: Enumerable<game_historyScalarWhereWithAggregatesInput>
    OR?: Enumerable<game_historyScalarWhereWithAggregatesInput>
    NOT?: Enumerable<game_historyScalarWhereWithAggregatesInput>
    id_game_history?: IntWithAggregatesFilter | number
    winner_id?: IntWithAggregatesFilter | number
    winner_scoor?: IntWithAggregatesFilter | number
    looser_id?: IntWithAggregatesFilter | number
    losser_scoor?: IntWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type chatroomWhereInput = {
    AND?: Enumerable<chatroomWhereInput>
    OR?: Enumerable<chatroomWhereInput>
    NOT?: Enumerable<chatroomWhereInput>
    chat_room_id?: IntFilter | number
    name?: StringFilter | string
    ischannel?: BoolFilter | boolean
    ispublic?: BoolFilter | boolean
    password?: StringFilter | string
    created_at?: StringFilter | string
    updated_at?: StringFilter | string
    msgs?: MessageListRelationFilter
    membership?: MembershipListRelationFilter
  }

  export type chatroomOrderByWithRelationInput = {
    chat_room_id?: SortOrder
    name?: SortOrder
    ischannel?: SortOrder
    ispublic?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    msgs?: messageOrderByRelationAggregateInput
    membership?: membershipOrderByRelationAggregateInput
  }

  export type chatroomWhereUniqueInput = {
    chat_room_id?: number
  }

  export type chatroomOrderByWithAggregationInput = {
    chat_room_id?: SortOrder
    name?: SortOrder
    ischannel?: SortOrder
    ispublic?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: chatroomCountOrderByAggregateInput
    _avg?: chatroomAvgOrderByAggregateInput
    _max?: chatroomMaxOrderByAggregateInput
    _min?: chatroomMinOrderByAggregateInput
    _sum?: chatroomSumOrderByAggregateInput
  }

  export type chatroomScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chatroomScalarWhereWithAggregatesInput>
    OR?: Enumerable<chatroomScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chatroomScalarWhereWithAggregatesInput>
    chat_room_id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    ischannel?: BoolWithAggregatesFilter | boolean
    ispublic?: BoolWithAggregatesFilter | boolean
    password?: StringWithAggregatesFilter | string
    created_at?: StringWithAggregatesFilter | string
    updated_at?: StringWithAggregatesFilter | string
  }

  export type messageWhereInput = {
    AND?: Enumerable<messageWhereInput>
    OR?: Enumerable<messageWhereInput>
    NOT?: Enumerable<messageWhereInput>
    message_id?: IntFilter | number
    content?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    author?: XOR<PlayerRelationFilter, PlayerWhereInput>
    author_id?: IntFilter | number
    created_in?: XOR<ChatroomRelationFilter, chatroomWhereInput>
    chat_id?: IntFilter | number
  }

  export type messageOrderByWithRelationInput = {
    message_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    author?: PlayerOrderByWithRelationInput
    author_id?: SortOrder
    created_in?: chatroomOrderByWithRelationInput
    chat_id?: SortOrder
  }

  export type messageWhereUniqueInput = {
    message_id?: number
  }

  export type messageOrderByWithAggregationInput = {
    message_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    author_id?: SortOrder
    chat_id?: SortOrder
    _count?: messageCountOrderByAggregateInput
    _avg?: messageAvgOrderByAggregateInput
    _max?: messageMaxOrderByAggregateInput
    _min?: messageMinOrderByAggregateInput
    _sum?: messageSumOrderByAggregateInput
  }

  export type messageScalarWhereWithAggregatesInput = {
    AND?: Enumerable<messageScalarWhereWithAggregatesInput>
    OR?: Enumerable<messageScalarWhereWithAggregatesInput>
    NOT?: Enumerable<messageScalarWhereWithAggregatesInput>
    message_id?: IntWithAggregatesFilter | number
    content?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    author_id?: IntWithAggregatesFilter | number
    chat_id?: IntWithAggregatesFilter | number
  }

  export type membershipWhereInput = {
    AND?: Enumerable<membershipWhereInput>
    OR?: Enumerable<membershipWhereInput>
    NOT?: Enumerable<membershipWhereInput>
    id_membership?: IntFilter | number
    player?: XOR<PlayerRelationFilter, PlayerWhereInput>
    player_id?: IntFilter | number
    chatroom?: XOR<ChatroomRelationFilter, chatroomWhereInput>
    chat_id?: IntFilter | number
    rool?: StringFilter | string
  }

  export type membershipOrderByWithRelationInput = {
    id_membership?: SortOrder
    player?: PlayerOrderByWithRelationInput
    player_id?: SortOrder
    chatroom?: chatroomOrderByWithRelationInput
    chat_id?: SortOrder
    rool?: SortOrder
  }

  export type membershipWhereUniqueInput = {
    id_membership?: number
  }

  export type membershipOrderByWithAggregationInput = {
    id_membership?: SortOrder
    player_id?: SortOrder
    chat_id?: SortOrder
    rool?: SortOrder
    _count?: membershipCountOrderByAggregateInput
    _avg?: membershipAvgOrderByAggregateInput
    _max?: membershipMaxOrderByAggregateInput
    _min?: membershipMinOrderByAggregateInput
    _sum?: membershipSumOrderByAggregateInput
  }

  export type membershipScalarWhereWithAggregatesInput = {
    AND?: Enumerable<membershipScalarWhereWithAggregatesInput>
    OR?: Enumerable<membershipScalarWhereWithAggregatesInput>
    NOT?: Enumerable<membershipScalarWhereWithAggregatesInput>
    id_membership?: IntWithAggregatesFilter | number
    player_id?: IntWithAggregatesFilter | number
    chat_id?: IntWithAggregatesFilter | number
    rool?: StringWithAggregatesFilter | string
  }

  export type relationWhereInput = {
    AND?: Enumerable<relationWhereInput>
    OR?: Enumerable<relationWhereInput>
    NOT?: Enumerable<relationWhereInput>
    id_relation?: IntFilter | number
    player1?: XOR<PlayerRelationFilter, PlayerWhereInput>
    player1_id?: IntFilter | number
    player2?: XOR<PlayerRelationFilter, PlayerWhereInput>
    player2_id?: IntFilter | number
    status?: StringFilter | string
  }

  export type relationOrderByWithRelationInput = {
    id_relation?: SortOrder
    player1?: PlayerOrderByWithRelationInput
    player1_id?: SortOrder
    player2?: PlayerOrderByWithRelationInput
    player2_id?: SortOrder
    status?: SortOrder
  }

  export type relationWhereUniqueInput = {
    id_relation?: number
  }

  export type relationOrderByWithAggregationInput = {
    id_relation?: SortOrder
    player1_id?: SortOrder
    player2_id?: SortOrder
    status?: SortOrder
    _count?: relationCountOrderByAggregateInput
    _avg?: relationAvgOrderByAggregateInput
    _max?: relationMaxOrderByAggregateInput
    _min?: relationMinOrderByAggregateInput
    _sum?: relationSumOrderByAggregateInput
  }

  export type relationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<relationScalarWhereWithAggregatesInput>
    OR?: Enumerable<relationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<relationScalarWhereWithAggregatesInput>
    id_relation?: IntWithAggregatesFilter | number
    player1_id?: IntWithAggregatesFilter | number
    player2_id?: IntWithAggregatesFilter | number
    status?: StringWithAggregatesFilter | string
  }

  export type PlayerCreateInput = {
    username: string
    avatar?: string
    is_playing?: boolean
    wines?: number
    loses?: number
    authentification_token: string
    game_winned?: game_historyCreateNestedManyWithoutWinnerInput
    game_losed?: game_historyCreateNestedManyWithoutLooserInput
    msgs?: messageCreateNestedManyWithoutAuthorInput
    membership?: membershipCreateNestedManyWithoutPlayerInput
    relation_from?: relationCreateNestedManyWithoutPlayer1Input
    relation_too?: relationCreateNestedManyWithoutPlayer2Input
  }

  export type PlayerUncheckedCreateInput = {
    player_id?: number
    username: string
    avatar?: string
    is_playing?: boolean
    wines?: number
    loses?: number
    authentification_token: string
    game_winned?: game_historyUncheckedCreateNestedManyWithoutWinnerInput
    game_losed?: game_historyUncheckedCreateNestedManyWithoutLooserInput
    msgs?: messageUncheckedCreateNestedManyWithoutAuthorInput
    membership?: membershipUncheckedCreateNestedManyWithoutPlayerInput
    relation_from?: relationUncheckedCreateNestedManyWithoutPlayer1Input
    relation_too?: relationUncheckedCreateNestedManyWithoutPlayer2Input
  }

  export type PlayerUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    is_playing?: BoolFieldUpdateOperationsInput | boolean
    wines?: IntFieldUpdateOperationsInput | number
    loses?: IntFieldUpdateOperationsInput | number
    authentification_token?: StringFieldUpdateOperationsInput | string
    game_winned?: game_historyUpdateManyWithoutWinnerNestedInput
    game_losed?: game_historyUpdateManyWithoutLooserNestedInput
    msgs?: messageUpdateManyWithoutAuthorNestedInput
    membership?: membershipUpdateManyWithoutPlayerNestedInput
    relation_from?: relationUpdateManyWithoutPlayer1NestedInput
    relation_too?: relationUpdateManyWithoutPlayer2NestedInput
  }

  export type PlayerUncheckedUpdateInput = {
    player_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    is_playing?: BoolFieldUpdateOperationsInput | boolean
    wines?: IntFieldUpdateOperationsInput | number
    loses?: IntFieldUpdateOperationsInput | number
    authentification_token?: StringFieldUpdateOperationsInput | string
    game_winned?: game_historyUncheckedUpdateManyWithoutWinnerNestedInput
    game_losed?: game_historyUncheckedUpdateManyWithoutLooserNestedInput
    msgs?: messageUncheckedUpdateManyWithoutAuthorNestedInput
    membership?: membershipUncheckedUpdateManyWithoutPlayerNestedInput
    relation_from?: relationUncheckedUpdateManyWithoutPlayer1NestedInput
    relation_too?: relationUncheckedUpdateManyWithoutPlayer2NestedInput
  }

  export type PlayerUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    is_playing?: BoolFieldUpdateOperationsInput | boolean
    wines?: IntFieldUpdateOperationsInput | number
    loses?: IntFieldUpdateOperationsInput | number
    authentification_token?: StringFieldUpdateOperationsInput | string
  }

  export type PlayerUncheckedUpdateManyInput = {
    player_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    is_playing?: BoolFieldUpdateOperationsInput | boolean
    wines?: IntFieldUpdateOperationsInput | number
    loses?: IntFieldUpdateOperationsInput | number
    authentification_token?: StringFieldUpdateOperationsInput | string
  }

  export type game_historyCreateInput = {
    winner: PlayerCreateNestedOneWithoutGame_winnedInput
    winner_scoor: number
    looser: PlayerCreateNestedOneWithoutGame_losedInput
    losser_scoor: number
    created_at?: Date | string
  }

  export type game_historyUncheckedCreateInput = {
    id_game_history?: number
    winner_id: number
    winner_scoor: number
    looser_id: number
    losser_scoor: number
    created_at?: Date | string
  }

  export type game_historyUpdateInput = {
    winner?: PlayerUpdateOneRequiredWithoutGame_winnedNestedInput
    winner_scoor?: IntFieldUpdateOperationsInput | number
    looser?: PlayerUpdateOneRequiredWithoutGame_losedNestedInput
    losser_scoor?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type game_historyUncheckedUpdateInput = {
    id_game_history?: IntFieldUpdateOperationsInput | number
    winner_id?: IntFieldUpdateOperationsInput | number
    winner_scoor?: IntFieldUpdateOperationsInput | number
    looser_id?: IntFieldUpdateOperationsInput | number
    losser_scoor?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type game_historyUpdateManyMutationInput = {
    winner_scoor?: IntFieldUpdateOperationsInput | number
    losser_scoor?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type game_historyUncheckedUpdateManyInput = {
    id_game_history?: IntFieldUpdateOperationsInput | number
    winner_id?: IntFieldUpdateOperationsInput | number
    winner_scoor?: IntFieldUpdateOperationsInput | number
    looser_id?: IntFieldUpdateOperationsInput | number
    losser_scoor?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type chatroomCreateInput = {
    name: string
    ischannel: boolean
    ispublic: boolean
    password: string
    created_at: string
    updated_at: string
    msgs?: messageCreateNestedManyWithoutCreated_inInput
    membership?: membershipCreateNestedManyWithoutChatroomInput
  }

  export type chatroomUncheckedCreateInput = {
    chat_room_id?: number
    name: string
    ischannel: boolean
    ispublic: boolean
    password: string
    created_at: string
    updated_at: string
    msgs?: messageUncheckedCreateNestedManyWithoutCreated_inInput
    membership?: membershipUncheckedCreateNestedManyWithoutChatroomInput
  }

  export type chatroomUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    ischannel?: BoolFieldUpdateOperationsInput | boolean
    ispublic?: BoolFieldUpdateOperationsInput | boolean
    password?: StringFieldUpdateOperationsInput | string
    created_at?: StringFieldUpdateOperationsInput | string
    updated_at?: StringFieldUpdateOperationsInput | string
    msgs?: messageUpdateManyWithoutCreated_inNestedInput
    membership?: membershipUpdateManyWithoutChatroomNestedInput
  }

  export type chatroomUncheckedUpdateInput = {
    chat_room_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    ischannel?: BoolFieldUpdateOperationsInput | boolean
    ispublic?: BoolFieldUpdateOperationsInput | boolean
    password?: StringFieldUpdateOperationsInput | string
    created_at?: StringFieldUpdateOperationsInput | string
    updated_at?: StringFieldUpdateOperationsInput | string
    msgs?: messageUncheckedUpdateManyWithoutCreated_inNestedInput
    membership?: membershipUncheckedUpdateManyWithoutChatroomNestedInput
  }

  export type chatroomUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    ischannel?: BoolFieldUpdateOperationsInput | boolean
    ispublic?: BoolFieldUpdateOperationsInput | boolean
    password?: StringFieldUpdateOperationsInput | string
    created_at?: StringFieldUpdateOperationsInput | string
    updated_at?: StringFieldUpdateOperationsInput | string
  }

  export type chatroomUncheckedUpdateManyInput = {
    chat_room_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    ischannel?: BoolFieldUpdateOperationsInput | boolean
    ispublic?: BoolFieldUpdateOperationsInput | boolean
    password?: StringFieldUpdateOperationsInput | string
    created_at?: StringFieldUpdateOperationsInput | string
    updated_at?: StringFieldUpdateOperationsInput | string
  }

  export type messageCreateInput = {
    content: string
    created_at?: Date | string
    author: PlayerCreateNestedOneWithoutMsgsInput
    created_in: chatroomCreateNestedOneWithoutMsgsInput
  }

  export type messageUncheckedCreateInput = {
    message_id?: number
    content: string
    created_at?: Date | string
    author_id: number
    chat_id: number
  }

  export type messageUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: PlayerUpdateOneRequiredWithoutMsgsNestedInput
    created_in?: chatroomUpdateOneRequiredWithoutMsgsNestedInput
  }

  export type messageUncheckedUpdateInput = {
    message_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    author_id?: IntFieldUpdateOperationsInput | number
    chat_id?: IntFieldUpdateOperationsInput | number
  }

  export type messageUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type messageUncheckedUpdateManyInput = {
    message_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    author_id?: IntFieldUpdateOperationsInput | number
    chat_id?: IntFieldUpdateOperationsInput | number
  }

  export type membershipCreateInput = {
    player: PlayerCreateNestedOneWithoutMembershipInput
    chatroom: chatroomCreateNestedOneWithoutMembershipInput
    rool: string
  }

  export type membershipUncheckedCreateInput = {
    id_membership?: number
    player_id: number
    chat_id: number
    rool: string
  }

  export type membershipUpdateInput = {
    player?: PlayerUpdateOneRequiredWithoutMembershipNestedInput
    chatroom?: chatroomUpdateOneRequiredWithoutMembershipNestedInput
    rool?: StringFieldUpdateOperationsInput | string
  }

  export type membershipUncheckedUpdateInput = {
    id_membership?: IntFieldUpdateOperationsInput | number
    player_id?: IntFieldUpdateOperationsInput | number
    chat_id?: IntFieldUpdateOperationsInput | number
    rool?: StringFieldUpdateOperationsInput | string
  }

  export type membershipUpdateManyMutationInput = {
    rool?: StringFieldUpdateOperationsInput | string
  }

  export type membershipUncheckedUpdateManyInput = {
    id_membership?: IntFieldUpdateOperationsInput | number
    player_id?: IntFieldUpdateOperationsInput | number
    chat_id?: IntFieldUpdateOperationsInput | number
    rool?: StringFieldUpdateOperationsInput | string
  }

  export type relationCreateInput = {
    player1: PlayerCreateNestedOneWithoutRelation_fromInput
    player2: PlayerCreateNestedOneWithoutRelation_tooInput
    status: string
  }

  export type relationUncheckedCreateInput = {
    id_relation?: number
    player1_id: number
    player2_id: number
    status: string
  }

  export type relationUpdateInput = {
    player1?: PlayerUpdateOneRequiredWithoutRelation_fromNestedInput
    player2?: PlayerUpdateOneRequiredWithoutRelation_tooNestedInput
    status?: StringFieldUpdateOperationsInput | string
  }

  export type relationUncheckedUpdateInput = {
    id_relation?: IntFieldUpdateOperationsInput | number
    player1_id?: IntFieldUpdateOperationsInput | number
    player2_id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type relationUpdateManyMutationInput = {
    status?: StringFieldUpdateOperationsInput | string
  }

  export type relationUncheckedUpdateManyInput = {
    id_relation?: IntFieldUpdateOperationsInput | number
    player1_id?: IntFieldUpdateOperationsInput | number
    player2_id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type Game_historyListRelationFilter = {
    every?: game_historyWhereInput
    some?: game_historyWhereInput
    none?: game_historyWhereInput
  }

  export type MessageListRelationFilter = {
    every?: messageWhereInput
    some?: messageWhereInput
    none?: messageWhereInput
  }

  export type MembershipListRelationFilter = {
    every?: membershipWhereInput
    some?: membershipWhereInput
    none?: membershipWhereInput
  }

  export type RelationListRelationFilter = {
    every?: relationWhereInput
    some?: relationWhereInput
    none?: relationWhereInput
  }

  export type game_historyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type messageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type membershipOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type relationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlayerCountOrderByAggregateInput = {
    player_id?: SortOrder
    username?: SortOrder
    avatar?: SortOrder
    is_playing?: SortOrder
    wines?: SortOrder
    loses?: SortOrder
    authentification_token?: SortOrder
  }

  export type PlayerAvgOrderByAggregateInput = {
    player_id?: SortOrder
    wines?: SortOrder
    loses?: SortOrder
  }

  export type PlayerMaxOrderByAggregateInput = {
    player_id?: SortOrder
    username?: SortOrder
    avatar?: SortOrder
    is_playing?: SortOrder
    wines?: SortOrder
    loses?: SortOrder
    authentification_token?: SortOrder
  }

  export type PlayerMinOrderByAggregateInput = {
    player_id?: SortOrder
    username?: SortOrder
    avatar?: SortOrder
    is_playing?: SortOrder
    wines?: SortOrder
    loses?: SortOrder
    authentification_token?: SortOrder
  }

  export type PlayerSumOrderByAggregateInput = {
    player_id?: SortOrder
    wines?: SortOrder
    loses?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type PlayerRelationFilter = {
    is?: PlayerWhereInput
    isNot?: PlayerWhereInput
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type game_historyCountOrderByAggregateInput = {
    id_game_history?: SortOrder
    winner_id?: SortOrder
    winner_scoor?: SortOrder
    looser_id?: SortOrder
    losser_scoor?: SortOrder
    created_at?: SortOrder
  }

  export type game_historyAvgOrderByAggregateInput = {
    id_game_history?: SortOrder
    winner_id?: SortOrder
    winner_scoor?: SortOrder
    looser_id?: SortOrder
    losser_scoor?: SortOrder
  }

  export type game_historyMaxOrderByAggregateInput = {
    id_game_history?: SortOrder
    winner_id?: SortOrder
    winner_scoor?: SortOrder
    looser_id?: SortOrder
    losser_scoor?: SortOrder
    created_at?: SortOrder
  }

  export type game_historyMinOrderByAggregateInput = {
    id_game_history?: SortOrder
    winner_id?: SortOrder
    winner_scoor?: SortOrder
    looser_id?: SortOrder
    losser_scoor?: SortOrder
    created_at?: SortOrder
  }

  export type game_historySumOrderByAggregateInput = {
    id_game_history?: SortOrder
    winner_id?: SortOrder
    winner_scoor?: SortOrder
    looser_id?: SortOrder
    losser_scoor?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type chatroomCountOrderByAggregateInput = {
    chat_room_id?: SortOrder
    name?: SortOrder
    ischannel?: SortOrder
    ispublic?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type chatroomAvgOrderByAggregateInput = {
    chat_room_id?: SortOrder
  }

  export type chatroomMaxOrderByAggregateInput = {
    chat_room_id?: SortOrder
    name?: SortOrder
    ischannel?: SortOrder
    ispublic?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type chatroomMinOrderByAggregateInput = {
    chat_room_id?: SortOrder
    name?: SortOrder
    ischannel?: SortOrder
    ispublic?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type chatroomSumOrderByAggregateInput = {
    chat_room_id?: SortOrder
  }

  export type ChatroomRelationFilter = {
    is?: chatroomWhereInput
    isNot?: chatroomWhereInput
  }

  export type messageCountOrderByAggregateInput = {
    message_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    author_id?: SortOrder
    chat_id?: SortOrder
  }

  export type messageAvgOrderByAggregateInput = {
    message_id?: SortOrder
    author_id?: SortOrder
    chat_id?: SortOrder
  }

  export type messageMaxOrderByAggregateInput = {
    message_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    author_id?: SortOrder
    chat_id?: SortOrder
  }

  export type messageMinOrderByAggregateInput = {
    message_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    author_id?: SortOrder
    chat_id?: SortOrder
  }

  export type messageSumOrderByAggregateInput = {
    message_id?: SortOrder
    author_id?: SortOrder
    chat_id?: SortOrder
  }

  export type membershipCountOrderByAggregateInput = {
    id_membership?: SortOrder
    player_id?: SortOrder
    chat_id?: SortOrder
    rool?: SortOrder
  }

  export type membershipAvgOrderByAggregateInput = {
    id_membership?: SortOrder
    player_id?: SortOrder
    chat_id?: SortOrder
  }

  export type membershipMaxOrderByAggregateInput = {
    id_membership?: SortOrder
    player_id?: SortOrder
    chat_id?: SortOrder
    rool?: SortOrder
  }

  export type membershipMinOrderByAggregateInput = {
    id_membership?: SortOrder
    player_id?: SortOrder
    chat_id?: SortOrder
    rool?: SortOrder
  }

  export type membershipSumOrderByAggregateInput = {
    id_membership?: SortOrder
    player_id?: SortOrder
    chat_id?: SortOrder
  }

  export type relationCountOrderByAggregateInput = {
    id_relation?: SortOrder
    player1_id?: SortOrder
    player2_id?: SortOrder
    status?: SortOrder
  }

  export type relationAvgOrderByAggregateInput = {
    id_relation?: SortOrder
    player1_id?: SortOrder
    player2_id?: SortOrder
  }

  export type relationMaxOrderByAggregateInput = {
    id_relation?: SortOrder
    player1_id?: SortOrder
    player2_id?: SortOrder
    status?: SortOrder
  }

  export type relationMinOrderByAggregateInput = {
    id_relation?: SortOrder
    player1_id?: SortOrder
    player2_id?: SortOrder
    status?: SortOrder
  }

  export type relationSumOrderByAggregateInput = {
    id_relation?: SortOrder
    player1_id?: SortOrder
    player2_id?: SortOrder
  }

  export type game_historyCreateNestedManyWithoutWinnerInput = {
    create?: XOR<Enumerable<game_historyCreateWithoutWinnerInput>, Enumerable<game_historyUncheckedCreateWithoutWinnerInput>>
    connectOrCreate?: Enumerable<game_historyCreateOrConnectWithoutWinnerInput>
    connect?: Enumerable<game_historyWhereUniqueInput>
  }

  export type game_historyCreateNestedManyWithoutLooserInput = {
    create?: XOR<Enumerable<game_historyCreateWithoutLooserInput>, Enumerable<game_historyUncheckedCreateWithoutLooserInput>>
    connectOrCreate?: Enumerable<game_historyCreateOrConnectWithoutLooserInput>
    connect?: Enumerable<game_historyWhereUniqueInput>
  }

  export type messageCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<messageCreateWithoutAuthorInput>, Enumerable<messageUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<messageCreateOrConnectWithoutAuthorInput>
    connect?: Enumerable<messageWhereUniqueInput>
  }

  export type membershipCreateNestedManyWithoutPlayerInput = {
    create?: XOR<Enumerable<membershipCreateWithoutPlayerInput>, Enumerable<membershipUncheckedCreateWithoutPlayerInput>>
    connectOrCreate?: Enumerable<membershipCreateOrConnectWithoutPlayerInput>
    connect?: Enumerable<membershipWhereUniqueInput>
  }

  export type relationCreateNestedManyWithoutPlayer1Input = {
    create?: XOR<Enumerable<relationCreateWithoutPlayer1Input>, Enumerable<relationUncheckedCreateWithoutPlayer1Input>>
    connectOrCreate?: Enumerable<relationCreateOrConnectWithoutPlayer1Input>
    connect?: Enumerable<relationWhereUniqueInput>
  }

  export type relationCreateNestedManyWithoutPlayer2Input = {
    create?: XOR<Enumerable<relationCreateWithoutPlayer2Input>, Enumerable<relationUncheckedCreateWithoutPlayer2Input>>
    connectOrCreate?: Enumerable<relationCreateOrConnectWithoutPlayer2Input>
    connect?: Enumerable<relationWhereUniqueInput>
  }

  export type game_historyUncheckedCreateNestedManyWithoutWinnerInput = {
    create?: XOR<Enumerable<game_historyCreateWithoutWinnerInput>, Enumerable<game_historyUncheckedCreateWithoutWinnerInput>>
    connectOrCreate?: Enumerable<game_historyCreateOrConnectWithoutWinnerInput>
    connect?: Enumerable<game_historyWhereUniqueInput>
  }

  export type game_historyUncheckedCreateNestedManyWithoutLooserInput = {
    create?: XOR<Enumerable<game_historyCreateWithoutLooserInput>, Enumerable<game_historyUncheckedCreateWithoutLooserInput>>
    connectOrCreate?: Enumerable<game_historyCreateOrConnectWithoutLooserInput>
    connect?: Enumerable<game_historyWhereUniqueInput>
  }

  export type messageUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<messageCreateWithoutAuthorInput>, Enumerable<messageUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<messageCreateOrConnectWithoutAuthorInput>
    connect?: Enumerable<messageWhereUniqueInput>
  }

  export type membershipUncheckedCreateNestedManyWithoutPlayerInput = {
    create?: XOR<Enumerable<membershipCreateWithoutPlayerInput>, Enumerable<membershipUncheckedCreateWithoutPlayerInput>>
    connectOrCreate?: Enumerable<membershipCreateOrConnectWithoutPlayerInput>
    connect?: Enumerable<membershipWhereUniqueInput>
  }

  export type relationUncheckedCreateNestedManyWithoutPlayer1Input = {
    create?: XOR<Enumerable<relationCreateWithoutPlayer1Input>, Enumerable<relationUncheckedCreateWithoutPlayer1Input>>
    connectOrCreate?: Enumerable<relationCreateOrConnectWithoutPlayer1Input>
    connect?: Enumerable<relationWhereUniqueInput>
  }

  export type relationUncheckedCreateNestedManyWithoutPlayer2Input = {
    create?: XOR<Enumerable<relationCreateWithoutPlayer2Input>, Enumerable<relationUncheckedCreateWithoutPlayer2Input>>
    connectOrCreate?: Enumerable<relationCreateOrConnectWithoutPlayer2Input>
    connect?: Enumerable<relationWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type game_historyUpdateManyWithoutWinnerNestedInput = {
    create?: XOR<Enumerable<game_historyCreateWithoutWinnerInput>, Enumerable<game_historyUncheckedCreateWithoutWinnerInput>>
    connectOrCreate?: Enumerable<game_historyCreateOrConnectWithoutWinnerInput>
    upsert?: Enumerable<game_historyUpsertWithWhereUniqueWithoutWinnerInput>
    set?: Enumerable<game_historyWhereUniqueInput>
    disconnect?: Enumerable<game_historyWhereUniqueInput>
    delete?: Enumerable<game_historyWhereUniqueInput>
    connect?: Enumerable<game_historyWhereUniqueInput>
    update?: Enumerable<game_historyUpdateWithWhereUniqueWithoutWinnerInput>
    updateMany?: Enumerable<game_historyUpdateManyWithWhereWithoutWinnerInput>
    deleteMany?: Enumerable<game_historyScalarWhereInput>
  }

  export type game_historyUpdateManyWithoutLooserNestedInput = {
    create?: XOR<Enumerable<game_historyCreateWithoutLooserInput>, Enumerable<game_historyUncheckedCreateWithoutLooserInput>>
    connectOrCreate?: Enumerable<game_historyCreateOrConnectWithoutLooserInput>
    upsert?: Enumerable<game_historyUpsertWithWhereUniqueWithoutLooserInput>
    set?: Enumerable<game_historyWhereUniqueInput>
    disconnect?: Enumerable<game_historyWhereUniqueInput>
    delete?: Enumerable<game_historyWhereUniqueInput>
    connect?: Enumerable<game_historyWhereUniqueInput>
    update?: Enumerable<game_historyUpdateWithWhereUniqueWithoutLooserInput>
    updateMany?: Enumerable<game_historyUpdateManyWithWhereWithoutLooserInput>
    deleteMany?: Enumerable<game_historyScalarWhereInput>
  }

  export type messageUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<messageCreateWithoutAuthorInput>, Enumerable<messageUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<messageCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<messageUpsertWithWhereUniqueWithoutAuthorInput>
    set?: Enumerable<messageWhereUniqueInput>
    disconnect?: Enumerable<messageWhereUniqueInput>
    delete?: Enumerable<messageWhereUniqueInput>
    connect?: Enumerable<messageWhereUniqueInput>
    update?: Enumerable<messageUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<messageUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<messageScalarWhereInput>
  }

  export type membershipUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<Enumerable<membershipCreateWithoutPlayerInput>, Enumerable<membershipUncheckedCreateWithoutPlayerInput>>
    connectOrCreate?: Enumerable<membershipCreateOrConnectWithoutPlayerInput>
    upsert?: Enumerable<membershipUpsertWithWhereUniqueWithoutPlayerInput>
    set?: Enumerable<membershipWhereUniqueInput>
    disconnect?: Enumerable<membershipWhereUniqueInput>
    delete?: Enumerable<membershipWhereUniqueInput>
    connect?: Enumerable<membershipWhereUniqueInput>
    update?: Enumerable<membershipUpdateWithWhereUniqueWithoutPlayerInput>
    updateMany?: Enumerable<membershipUpdateManyWithWhereWithoutPlayerInput>
    deleteMany?: Enumerable<membershipScalarWhereInput>
  }

  export type relationUpdateManyWithoutPlayer1NestedInput = {
    create?: XOR<Enumerable<relationCreateWithoutPlayer1Input>, Enumerable<relationUncheckedCreateWithoutPlayer1Input>>
    connectOrCreate?: Enumerable<relationCreateOrConnectWithoutPlayer1Input>
    upsert?: Enumerable<relationUpsertWithWhereUniqueWithoutPlayer1Input>
    set?: Enumerable<relationWhereUniqueInput>
    disconnect?: Enumerable<relationWhereUniqueInput>
    delete?: Enumerable<relationWhereUniqueInput>
    connect?: Enumerable<relationWhereUniqueInput>
    update?: Enumerable<relationUpdateWithWhereUniqueWithoutPlayer1Input>
    updateMany?: Enumerable<relationUpdateManyWithWhereWithoutPlayer1Input>
    deleteMany?: Enumerable<relationScalarWhereInput>
  }

  export type relationUpdateManyWithoutPlayer2NestedInput = {
    create?: XOR<Enumerable<relationCreateWithoutPlayer2Input>, Enumerable<relationUncheckedCreateWithoutPlayer2Input>>
    connectOrCreate?: Enumerable<relationCreateOrConnectWithoutPlayer2Input>
    upsert?: Enumerable<relationUpsertWithWhereUniqueWithoutPlayer2Input>
    set?: Enumerable<relationWhereUniqueInput>
    disconnect?: Enumerable<relationWhereUniqueInput>
    delete?: Enumerable<relationWhereUniqueInput>
    connect?: Enumerable<relationWhereUniqueInput>
    update?: Enumerable<relationUpdateWithWhereUniqueWithoutPlayer2Input>
    updateMany?: Enumerable<relationUpdateManyWithWhereWithoutPlayer2Input>
    deleteMany?: Enumerable<relationScalarWhereInput>
  }

  export type game_historyUncheckedUpdateManyWithoutWinnerNestedInput = {
    create?: XOR<Enumerable<game_historyCreateWithoutWinnerInput>, Enumerable<game_historyUncheckedCreateWithoutWinnerInput>>
    connectOrCreate?: Enumerable<game_historyCreateOrConnectWithoutWinnerInput>
    upsert?: Enumerable<game_historyUpsertWithWhereUniqueWithoutWinnerInput>
    set?: Enumerable<game_historyWhereUniqueInput>
    disconnect?: Enumerable<game_historyWhereUniqueInput>
    delete?: Enumerable<game_historyWhereUniqueInput>
    connect?: Enumerable<game_historyWhereUniqueInput>
    update?: Enumerable<game_historyUpdateWithWhereUniqueWithoutWinnerInput>
    updateMany?: Enumerable<game_historyUpdateManyWithWhereWithoutWinnerInput>
    deleteMany?: Enumerable<game_historyScalarWhereInput>
  }

  export type game_historyUncheckedUpdateManyWithoutLooserNestedInput = {
    create?: XOR<Enumerable<game_historyCreateWithoutLooserInput>, Enumerable<game_historyUncheckedCreateWithoutLooserInput>>
    connectOrCreate?: Enumerable<game_historyCreateOrConnectWithoutLooserInput>
    upsert?: Enumerable<game_historyUpsertWithWhereUniqueWithoutLooserInput>
    set?: Enumerable<game_historyWhereUniqueInput>
    disconnect?: Enumerable<game_historyWhereUniqueInput>
    delete?: Enumerable<game_historyWhereUniqueInput>
    connect?: Enumerable<game_historyWhereUniqueInput>
    update?: Enumerable<game_historyUpdateWithWhereUniqueWithoutLooserInput>
    updateMany?: Enumerable<game_historyUpdateManyWithWhereWithoutLooserInput>
    deleteMany?: Enumerable<game_historyScalarWhereInput>
  }

  export type messageUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<messageCreateWithoutAuthorInput>, Enumerable<messageUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<messageCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<messageUpsertWithWhereUniqueWithoutAuthorInput>
    set?: Enumerable<messageWhereUniqueInput>
    disconnect?: Enumerable<messageWhereUniqueInput>
    delete?: Enumerable<messageWhereUniqueInput>
    connect?: Enumerable<messageWhereUniqueInput>
    update?: Enumerable<messageUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<messageUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<messageScalarWhereInput>
  }

  export type membershipUncheckedUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<Enumerable<membershipCreateWithoutPlayerInput>, Enumerable<membershipUncheckedCreateWithoutPlayerInput>>
    connectOrCreate?: Enumerable<membershipCreateOrConnectWithoutPlayerInput>
    upsert?: Enumerable<membershipUpsertWithWhereUniqueWithoutPlayerInput>
    set?: Enumerable<membershipWhereUniqueInput>
    disconnect?: Enumerable<membershipWhereUniqueInput>
    delete?: Enumerable<membershipWhereUniqueInput>
    connect?: Enumerable<membershipWhereUniqueInput>
    update?: Enumerable<membershipUpdateWithWhereUniqueWithoutPlayerInput>
    updateMany?: Enumerable<membershipUpdateManyWithWhereWithoutPlayerInput>
    deleteMany?: Enumerable<membershipScalarWhereInput>
  }

  export type relationUncheckedUpdateManyWithoutPlayer1NestedInput = {
    create?: XOR<Enumerable<relationCreateWithoutPlayer1Input>, Enumerable<relationUncheckedCreateWithoutPlayer1Input>>
    connectOrCreate?: Enumerable<relationCreateOrConnectWithoutPlayer1Input>
    upsert?: Enumerable<relationUpsertWithWhereUniqueWithoutPlayer1Input>
    set?: Enumerable<relationWhereUniqueInput>
    disconnect?: Enumerable<relationWhereUniqueInput>
    delete?: Enumerable<relationWhereUniqueInput>
    connect?: Enumerable<relationWhereUniqueInput>
    update?: Enumerable<relationUpdateWithWhereUniqueWithoutPlayer1Input>
    updateMany?: Enumerable<relationUpdateManyWithWhereWithoutPlayer1Input>
    deleteMany?: Enumerable<relationScalarWhereInput>
  }

  export type relationUncheckedUpdateManyWithoutPlayer2NestedInput = {
    create?: XOR<Enumerable<relationCreateWithoutPlayer2Input>, Enumerable<relationUncheckedCreateWithoutPlayer2Input>>
    connectOrCreate?: Enumerable<relationCreateOrConnectWithoutPlayer2Input>
    upsert?: Enumerable<relationUpsertWithWhereUniqueWithoutPlayer2Input>
    set?: Enumerable<relationWhereUniqueInput>
    disconnect?: Enumerable<relationWhereUniqueInput>
    delete?: Enumerable<relationWhereUniqueInput>
    connect?: Enumerable<relationWhereUniqueInput>
    update?: Enumerable<relationUpdateWithWhereUniqueWithoutPlayer2Input>
    updateMany?: Enumerable<relationUpdateManyWithWhereWithoutPlayer2Input>
    deleteMany?: Enumerable<relationScalarWhereInput>
  }

  export type PlayerCreateNestedOneWithoutGame_winnedInput = {
    create?: XOR<PlayerCreateWithoutGame_winnedInput, PlayerUncheckedCreateWithoutGame_winnedInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutGame_winnedInput
    connect?: PlayerWhereUniqueInput
  }

  export type PlayerCreateNestedOneWithoutGame_losedInput = {
    create?: XOR<PlayerCreateWithoutGame_losedInput, PlayerUncheckedCreateWithoutGame_losedInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutGame_losedInput
    connect?: PlayerWhereUniqueInput
  }

  export type PlayerUpdateOneRequiredWithoutGame_winnedNestedInput = {
    create?: XOR<PlayerCreateWithoutGame_winnedInput, PlayerUncheckedCreateWithoutGame_winnedInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutGame_winnedInput
    upsert?: PlayerUpsertWithoutGame_winnedInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<PlayerUpdateWithoutGame_winnedInput, PlayerUncheckedUpdateWithoutGame_winnedInput>
  }

  export type PlayerUpdateOneRequiredWithoutGame_losedNestedInput = {
    create?: XOR<PlayerCreateWithoutGame_losedInput, PlayerUncheckedCreateWithoutGame_losedInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutGame_losedInput
    upsert?: PlayerUpsertWithoutGame_losedInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<PlayerUpdateWithoutGame_losedInput, PlayerUncheckedUpdateWithoutGame_losedInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type messageCreateNestedManyWithoutCreated_inInput = {
    create?: XOR<Enumerable<messageCreateWithoutCreated_inInput>, Enumerable<messageUncheckedCreateWithoutCreated_inInput>>
    connectOrCreate?: Enumerable<messageCreateOrConnectWithoutCreated_inInput>
    connect?: Enumerable<messageWhereUniqueInput>
  }

  export type membershipCreateNestedManyWithoutChatroomInput = {
    create?: XOR<Enumerable<membershipCreateWithoutChatroomInput>, Enumerable<membershipUncheckedCreateWithoutChatroomInput>>
    connectOrCreate?: Enumerable<membershipCreateOrConnectWithoutChatroomInput>
    connect?: Enumerable<membershipWhereUniqueInput>
  }

  export type messageUncheckedCreateNestedManyWithoutCreated_inInput = {
    create?: XOR<Enumerable<messageCreateWithoutCreated_inInput>, Enumerable<messageUncheckedCreateWithoutCreated_inInput>>
    connectOrCreate?: Enumerable<messageCreateOrConnectWithoutCreated_inInput>
    connect?: Enumerable<messageWhereUniqueInput>
  }

  export type membershipUncheckedCreateNestedManyWithoutChatroomInput = {
    create?: XOR<Enumerable<membershipCreateWithoutChatroomInput>, Enumerable<membershipUncheckedCreateWithoutChatroomInput>>
    connectOrCreate?: Enumerable<membershipCreateOrConnectWithoutChatroomInput>
    connect?: Enumerable<membershipWhereUniqueInput>
  }

  export type messageUpdateManyWithoutCreated_inNestedInput = {
    create?: XOR<Enumerable<messageCreateWithoutCreated_inInput>, Enumerable<messageUncheckedCreateWithoutCreated_inInput>>
    connectOrCreate?: Enumerable<messageCreateOrConnectWithoutCreated_inInput>
    upsert?: Enumerable<messageUpsertWithWhereUniqueWithoutCreated_inInput>
    set?: Enumerable<messageWhereUniqueInput>
    disconnect?: Enumerable<messageWhereUniqueInput>
    delete?: Enumerable<messageWhereUniqueInput>
    connect?: Enumerable<messageWhereUniqueInput>
    update?: Enumerable<messageUpdateWithWhereUniqueWithoutCreated_inInput>
    updateMany?: Enumerable<messageUpdateManyWithWhereWithoutCreated_inInput>
    deleteMany?: Enumerable<messageScalarWhereInput>
  }

  export type membershipUpdateManyWithoutChatroomNestedInput = {
    create?: XOR<Enumerable<membershipCreateWithoutChatroomInput>, Enumerable<membershipUncheckedCreateWithoutChatroomInput>>
    connectOrCreate?: Enumerable<membershipCreateOrConnectWithoutChatroomInput>
    upsert?: Enumerable<membershipUpsertWithWhereUniqueWithoutChatroomInput>
    set?: Enumerable<membershipWhereUniqueInput>
    disconnect?: Enumerable<membershipWhereUniqueInput>
    delete?: Enumerable<membershipWhereUniqueInput>
    connect?: Enumerable<membershipWhereUniqueInput>
    update?: Enumerable<membershipUpdateWithWhereUniqueWithoutChatroomInput>
    updateMany?: Enumerable<membershipUpdateManyWithWhereWithoutChatroomInput>
    deleteMany?: Enumerable<membershipScalarWhereInput>
  }

  export type messageUncheckedUpdateManyWithoutCreated_inNestedInput = {
    create?: XOR<Enumerable<messageCreateWithoutCreated_inInput>, Enumerable<messageUncheckedCreateWithoutCreated_inInput>>
    connectOrCreate?: Enumerable<messageCreateOrConnectWithoutCreated_inInput>
    upsert?: Enumerable<messageUpsertWithWhereUniqueWithoutCreated_inInput>
    set?: Enumerable<messageWhereUniqueInput>
    disconnect?: Enumerable<messageWhereUniqueInput>
    delete?: Enumerable<messageWhereUniqueInput>
    connect?: Enumerable<messageWhereUniqueInput>
    update?: Enumerable<messageUpdateWithWhereUniqueWithoutCreated_inInput>
    updateMany?: Enumerable<messageUpdateManyWithWhereWithoutCreated_inInput>
    deleteMany?: Enumerable<messageScalarWhereInput>
  }

  export type membershipUncheckedUpdateManyWithoutChatroomNestedInput = {
    create?: XOR<Enumerable<membershipCreateWithoutChatroomInput>, Enumerable<membershipUncheckedCreateWithoutChatroomInput>>
    connectOrCreate?: Enumerable<membershipCreateOrConnectWithoutChatroomInput>
    upsert?: Enumerable<membershipUpsertWithWhereUniqueWithoutChatroomInput>
    set?: Enumerable<membershipWhereUniqueInput>
    disconnect?: Enumerable<membershipWhereUniqueInput>
    delete?: Enumerable<membershipWhereUniqueInput>
    connect?: Enumerable<membershipWhereUniqueInput>
    update?: Enumerable<membershipUpdateWithWhereUniqueWithoutChatroomInput>
    updateMany?: Enumerable<membershipUpdateManyWithWhereWithoutChatroomInput>
    deleteMany?: Enumerable<membershipScalarWhereInput>
  }

  export type PlayerCreateNestedOneWithoutMsgsInput = {
    create?: XOR<PlayerCreateWithoutMsgsInput, PlayerUncheckedCreateWithoutMsgsInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutMsgsInput
    connect?: PlayerWhereUniqueInput
  }

  export type chatroomCreateNestedOneWithoutMsgsInput = {
    create?: XOR<chatroomCreateWithoutMsgsInput, chatroomUncheckedCreateWithoutMsgsInput>
    connectOrCreate?: chatroomCreateOrConnectWithoutMsgsInput
    connect?: chatroomWhereUniqueInput
  }

  export type PlayerUpdateOneRequiredWithoutMsgsNestedInput = {
    create?: XOR<PlayerCreateWithoutMsgsInput, PlayerUncheckedCreateWithoutMsgsInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutMsgsInput
    upsert?: PlayerUpsertWithoutMsgsInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<PlayerUpdateWithoutMsgsInput, PlayerUncheckedUpdateWithoutMsgsInput>
  }

  export type chatroomUpdateOneRequiredWithoutMsgsNestedInput = {
    create?: XOR<chatroomCreateWithoutMsgsInput, chatroomUncheckedCreateWithoutMsgsInput>
    connectOrCreate?: chatroomCreateOrConnectWithoutMsgsInput
    upsert?: chatroomUpsertWithoutMsgsInput
    connect?: chatroomWhereUniqueInput
    update?: XOR<chatroomUpdateWithoutMsgsInput, chatroomUncheckedUpdateWithoutMsgsInput>
  }

  export type PlayerCreateNestedOneWithoutMembershipInput = {
    create?: XOR<PlayerCreateWithoutMembershipInput, PlayerUncheckedCreateWithoutMembershipInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutMembershipInput
    connect?: PlayerWhereUniqueInput
  }

  export type chatroomCreateNestedOneWithoutMembershipInput = {
    create?: XOR<chatroomCreateWithoutMembershipInput, chatroomUncheckedCreateWithoutMembershipInput>
    connectOrCreate?: chatroomCreateOrConnectWithoutMembershipInput
    connect?: chatroomWhereUniqueInput
  }

  export type PlayerUpdateOneRequiredWithoutMembershipNestedInput = {
    create?: XOR<PlayerCreateWithoutMembershipInput, PlayerUncheckedCreateWithoutMembershipInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutMembershipInput
    upsert?: PlayerUpsertWithoutMembershipInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<PlayerUpdateWithoutMembershipInput, PlayerUncheckedUpdateWithoutMembershipInput>
  }

  export type chatroomUpdateOneRequiredWithoutMembershipNestedInput = {
    create?: XOR<chatroomCreateWithoutMembershipInput, chatroomUncheckedCreateWithoutMembershipInput>
    connectOrCreate?: chatroomCreateOrConnectWithoutMembershipInput
    upsert?: chatroomUpsertWithoutMembershipInput
    connect?: chatroomWhereUniqueInput
    update?: XOR<chatroomUpdateWithoutMembershipInput, chatroomUncheckedUpdateWithoutMembershipInput>
  }

  export type PlayerCreateNestedOneWithoutRelation_fromInput = {
    create?: XOR<PlayerCreateWithoutRelation_fromInput, PlayerUncheckedCreateWithoutRelation_fromInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutRelation_fromInput
    connect?: PlayerWhereUniqueInput
  }

  export type PlayerCreateNestedOneWithoutRelation_tooInput = {
    create?: XOR<PlayerCreateWithoutRelation_tooInput, PlayerUncheckedCreateWithoutRelation_tooInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutRelation_tooInput
    connect?: PlayerWhereUniqueInput
  }

  export type PlayerUpdateOneRequiredWithoutRelation_fromNestedInput = {
    create?: XOR<PlayerCreateWithoutRelation_fromInput, PlayerUncheckedCreateWithoutRelation_fromInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutRelation_fromInput
    upsert?: PlayerUpsertWithoutRelation_fromInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<PlayerUpdateWithoutRelation_fromInput, PlayerUncheckedUpdateWithoutRelation_fromInput>
  }

  export type PlayerUpdateOneRequiredWithoutRelation_tooNestedInput = {
    create?: XOR<PlayerCreateWithoutRelation_tooInput, PlayerUncheckedCreateWithoutRelation_tooInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutRelation_tooInput
    upsert?: PlayerUpsertWithoutRelation_tooInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<PlayerUpdateWithoutRelation_tooInput, PlayerUncheckedUpdateWithoutRelation_tooInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type game_historyCreateWithoutWinnerInput = {
    winner_scoor: number
    looser: PlayerCreateNestedOneWithoutGame_losedInput
    losser_scoor: number
    created_at?: Date | string
  }

  export type game_historyUncheckedCreateWithoutWinnerInput = {
    id_game_history?: number
    winner_scoor: number
    looser_id: number
    losser_scoor: number
    created_at?: Date | string
  }

  export type game_historyCreateOrConnectWithoutWinnerInput = {
    where: game_historyWhereUniqueInput
    create: XOR<game_historyCreateWithoutWinnerInput, game_historyUncheckedCreateWithoutWinnerInput>
  }

  export type game_historyCreateWithoutLooserInput = {
    winner: PlayerCreateNestedOneWithoutGame_winnedInput
    winner_scoor: number
    losser_scoor: number
    created_at?: Date | string
  }

  export type game_historyUncheckedCreateWithoutLooserInput = {
    id_game_history?: number
    winner_id: number
    winner_scoor: number
    losser_scoor: number
    created_at?: Date | string
  }

  export type game_historyCreateOrConnectWithoutLooserInput = {
    where: game_historyWhereUniqueInput
    create: XOR<game_historyCreateWithoutLooserInput, game_historyUncheckedCreateWithoutLooserInput>
  }

  export type messageCreateWithoutAuthorInput = {
    content: string
    created_at?: Date | string
    created_in: chatroomCreateNestedOneWithoutMsgsInput
  }

  export type messageUncheckedCreateWithoutAuthorInput = {
    message_id?: number
    content: string
    created_at?: Date | string
    chat_id: number
  }

  export type messageCreateOrConnectWithoutAuthorInput = {
    where: messageWhereUniqueInput
    create: XOR<messageCreateWithoutAuthorInput, messageUncheckedCreateWithoutAuthorInput>
  }

  export type membershipCreateWithoutPlayerInput = {
    chatroom: chatroomCreateNestedOneWithoutMembershipInput
    rool: string
  }

  export type membershipUncheckedCreateWithoutPlayerInput = {
    id_membership?: number
    chat_id: number
    rool: string
  }

  export type membershipCreateOrConnectWithoutPlayerInput = {
    where: membershipWhereUniqueInput
    create: XOR<membershipCreateWithoutPlayerInput, membershipUncheckedCreateWithoutPlayerInput>
  }

  export type relationCreateWithoutPlayer1Input = {
    player2: PlayerCreateNestedOneWithoutRelation_tooInput
    status: string
  }

  export type relationUncheckedCreateWithoutPlayer1Input = {
    id_relation?: number
    player2_id: number
    status: string
  }

  export type relationCreateOrConnectWithoutPlayer1Input = {
    where: relationWhereUniqueInput
    create: XOR<relationCreateWithoutPlayer1Input, relationUncheckedCreateWithoutPlayer1Input>
  }

  export type relationCreateWithoutPlayer2Input = {
    player1: PlayerCreateNestedOneWithoutRelation_fromInput
    status: string
  }

  export type relationUncheckedCreateWithoutPlayer2Input = {
    id_relation?: number
    player1_id: number
    status: string
  }

  export type relationCreateOrConnectWithoutPlayer2Input = {
    where: relationWhereUniqueInput
    create: XOR<relationCreateWithoutPlayer2Input, relationUncheckedCreateWithoutPlayer2Input>
  }

  export type game_historyUpsertWithWhereUniqueWithoutWinnerInput = {
    where: game_historyWhereUniqueInput
    update: XOR<game_historyUpdateWithoutWinnerInput, game_historyUncheckedUpdateWithoutWinnerInput>
    create: XOR<game_historyCreateWithoutWinnerInput, game_historyUncheckedCreateWithoutWinnerInput>
  }

  export type game_historyUpdateWithWhereUniqueWithoutWinnerInput = {
    where: game_historyWhereUniqueInput
    data: XOR<game_historyUpdateWithoutWinnerInput, game_historyUncheckedUpdateWithoutWinnerInput>
  }

  export type game_historyUpdateManyWithWhereWithoutWinnerInput = {
    where: game_historyScalarWhereInput
    data: XOR<game_historyUpdateManyMutationInput, game_historyUncheckedUpdateManyWithoutGame_winnedInput>
  }

  export type game_historyScalarWhereInput = {
    AND?: Enumerable<game_historyScalarWhereInput>
    OR?: Enumerable<game_historyScalarWhereInput>
    NOT?: Enumerable<game_historyScalarWhereInput>
    id_game_history?: IntFilter | number
    winner_id?: IntFilter | number
    winner_scoor?: IntFilter | number
    looser_id?: IntFilter | number
    losser_scoor?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
  }

  export type game_historyUpsertWithWhereUniqueWithoutLooserInput = {
    where: game_historyWhereUniqueInput
    update: XOR<game_historyUpdateWithoutLooserInput, game_historyUncheckedUpdateWithoutLooserInput>
    create: XOR<game_historyCreateWithoutLooserInput, game_historyUncheckedCreateWithoutLooserInput>
  }

  export type game_historyUpdateWithWhereUniqueWithoutLooserInput = {
    where: game_historyWhereUniqueInput
    data: XOR<game_historyUpdateWithoutLooserInput, game_historyUncheckedUpdateWithoutLooserInput>
  }

  export type game_historyUpdateManyWithWhereWithoutLooserInput = {
    where: game_historyScalarWhereInput
    data: XOR<game_historyUpdateManyMutationInput, game_historyUncheckedUpdateManyWithoutGame_losedInput>
  }

  export type messageUpsertWithWhereUniqueWithoutAuthorInput = {
    where: messageWhereUniqueInput
    update: XOR<messageUpdateWithoutAuthorInput, messageUncheckedUpdateWithoutAuthorInput>
    create: XOR<messageCreateWithoutAuthorInput, messageUncheckedCreateWithoutAuthorInput>
  }

  export type messageUpdateWithWhereUniqueWithoutAuthorInput = {
    where: messageWhereUniqueInput
    data: XOR<messageUpdateWithoutAuthorInput, messageUncheckedUpdateWithoutAuthorInput>
  }

  export type messageUpdateManyWithWhereWithoutAuthorInput = {
    where: messageScalarWhereInput
    data: XOR<messageUpdateManyMutationInput, messageUncheckedUpdateManyWithoutMsgsInput>
  }

  export type messageScalarWhereInput = {
    AND?: Enumerable<messageScalarWhereInput>
    OR?: Enumerable<messageScalarWhereInput>
    NOT?: Enumerable<messageScalarWhereInput>
    message_id?: IntFilter | number
    content?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    author_id?: IntFilter | number
    chat_id?: IntFilter | number
  }

  export type membershipUpsertWithWhereUniqueWithoutPlayerInput = {
    where: membershipWhereUniqueInput
    update: XOR<membershipUpdateWithoutPlayerInput, membershipUncheckedUpdateWithoutPlayerInput>
    create: XOR<membershipCreateWithoutPlayerInput, membershipUncheckedCreateWithoutPlayerInput>
  }

  export type membershipUpdateWithWhereUniqueWithoutPlayerInput = {
    where: membershipWhereUniqueInput
    data: XOR<membershipUpdateWithoutPlayerInput, membershipUncheckedUpdateWithoutPlayerInput>
  }

  export type membershipUpdateManyWithWhereWithoutPlayerInput = {
    where: membershipScalarWhereInput
    data: XOR<membershipUpdateManyMutationInput, membershipUncheckedUpdateManyWithoutMembershipInput>
  }

  export type membershipScalarWhereInput = {
    AND?: Enumerable<membershipScalarWhereInput>
    OR?: Enumerable<membershipScalarWhereInput>
    NOT?: Enumerable<membershipScalarWhereInput>
    id_membership?: IntFilter | number
    player_id?: IntFilter | number
    chat_id?: IntFilter | number
    rool?: StringFilter | string
  }

  export type relationUpsertWithWhereUniqueWithoutPlayer1Input = {
    where: relationWhereUniqueInput
    update: XOR<relationUpdateWithoutPlayer1Input, relationUncheckedUpdateWithoutPlayer1Input>
    create: XOR<relationCreateWithoutPlayer1Input, relationUncheckedCreateWithoutPlayer1Input>
  }

  export type relationUpdateWithWhereUniqueWithoutPlayer1Input = {
    where: relationWhereUniqueInput
    data: XOR<relationUpdateWithoutPlayer1Input, relationUncheckedUpdateWithoutPlayer1Input>
  }

  export type relationUpdateManyWithWhereWithoutPlayer1Input = {
    where: relationScalarWhereInput
    data: XOR<relationUpdateManyMutationInput, relationUncheckedUpdateManyWithoutRelation_fromInput>
  }

  export type relationScalarWhereInput = {
    AND?: Enumerable<relationScalarWhereInput>
    OR?: Enumerable<relationScalarWhereInput>
    NOT?: Enumerable<relationScalarWhereInput>
    id_relation?: IntFilter | number
    player1_id?: IntFilter | number
    player2_id?: IntFilter | number
    status?: StringFilter | string
  }

  export type relationUpsertWithWhereUniqueWithoutPlayer2Input = {
    where: relationWhereUniqueInput
    update: XOR<relationUpdateWithoutPlayer2Input, relationUncheckedUpdateWithoutPlayer2Input>
    create: XOR<relationCreateWithoutPlayer2Input, relationUncheckedCreateWithoutPlayer2Input>
  }

  export type relationUpdateWithWhereUniqueWithoutPlayer2Input = {
    where: relationWhereUniqueInput
    data: XOR<relationUpdateWithoutPlayer2Input, relationUncheckedUpdateWithoutPlayer2Input>
  }

  export type relationUpdateManyWithWhereWithoutPlayer2Input = {
    where: relationScalarWhereInput
    data: XOR<relationUpdateManyMutationInput, relationUncheckedUpdateManyWithoutRelation_tooInput>
  }

  export type PlayerCreateWithoutGame_winnedInput = {
    username: string
    avatar?: string
    is_playing?: boolean
    wines?: number
    loses?: number
    authentification_token: string
    game_losed?: game_historyCreateNestedManyWithoutLooserInput
    msgs?: messageCreateNestedManyWithoutAuthorInput
    membership?: membershipCreateNestedManyWithoutPlayerInput
    relation_from?: relationCreateNestedManyWithoutPlayer1Input
    relation_too?: relationCreateNestedManyWithoutPlayer2Input
  }

  export type PlayerUncheckedCreateWithoutGame_winnedInput = {
    player_id?: number
    username: string
    avatar?: string
    is_playing?: boolean
    wines?: number
    loses?: number
    authentification_token: string
    game_losed?: game_historyUncheckedCreateNestedManyWithoutLooserInput
    msgs?: messageUncheckedCreateNestedManyWithoutAuthorInput
    membership?: membershipUncheckedCreateNestedManyWithoutPlayerInput
    relation_from?: relationUncheckedCreateNestedManyWithoutPlayer1Input
    relation_too?: relationUncheckedCreateNestedManyWithoutPlayer2Input
  }

  export type PlayerCreateOrConnectWithoutGame_winnedInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutGame_winnedInput, PlayerUncheckedCreateWithoutGame_winnedInput>
  }

  export type PlayerCreateWithoutGame_losedInput = {
    username: string
    avatar?: string
    is_playing?: boolean
    wines?: number
    loses?: number
    authentification_token: string
    game_winned?: game_historyCreateNestedManyWithoutWinnerInput
    msgs?: messageCreateNestedManyWithoutAuthorInput
    membership?: membershipCreateNestedManyWithoutPlayerInput
    relation_from?: relationCreateNestedManyWithoutPlayer1Input
    relation_too?: relationCreateNestedManyWithoutPlayer2Input
  }

  export type PlayerUncheckedCreateWithoutGame_losedInput = {
    player_id?: number
    username: string
    avatar?: string
    is_playing?: boolean
    wines?: number
    loses?: number
    authentification_token: string
    game_winned?: game_historyUncheckedCreateNestedManyWithoutWinnerInput
    msgs?: messageUncheckedCreateNestedManyWithoutAuthorInput
    membership?: membershipUncheckedCreateNestedManyWithoutPlayerInput
    relation_from?: relationUncheckedCreateNestedManyWithoutPlayer1Input
    relation_too?: relationUncheckedCreateNestedManyWithoutPlayer2Input
  }

  export type PlayerCreateOrConnectWithoutGame_losedInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutGame_losedInput, PlayerUncheckedCreateWithoutGame_losedInput>
  }

  export type PlayerUpsertWithoutGame_winnedInput = {
    update: XOR<PlayerUpdateWithoutGame_winnedInput, PlayerUncheckedUpdateWithoutGame_winnedInput>
    create: XOR<PlayerCreateWithoutGame_winnedInput, PlayerUncheckedCreateWithoutGame_winnedInput>
  }

  export type PlayerUpdateWithoutGame_winnedInput = {
    username?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    is_playing?: BoolFieldUpdateOperationsInput | boolean
    wines?: IntFieldUpdateOperationsInput | number
    loses?: IntFieldUpdateOperationsInput | number
    authentification_token?: StringFieldUpdateOperationsInput | string
    game_losed?: game_historyUpdateManyWithoutLooserNestedInput
    msgs?: messageUpdateManyWithoutAuthorNestedInput
    membership?: membershipUpdateManyWithoutPlayerNestedInput
    relation_from?: relationUpdateManyWithoutPlayer1NestedInput
    relation_too?: relationUpdateManyWithoutPlayer2NestedInput
  }

  export type PlayerUncheckedUpdateWithoutGame_winnedInput = {
    player_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    is_playing?: BoolFieldUpdateOperationsInput | boolean
    wines?: IntFieldUpdateOperationsInput | number
    loses?: IntFieldUpdateOperationsInput | number
    authentification_token?: StringFieldUpdateOperationsInput | string
    game_losed?: game_historyUncheckedUpdateManyWithoutLooserNestedInput
    msgs?: messageUncheckedUpdateManyWithoutAuthorNestedInput
    membership?: membershipUncheckedUpdateManyWithoutPlayerNestedInput
    relation_from?: relationUncheckedUpdateManyWithoutPlayer1NestedInput
    relation_too?: relationUncheckedUpdateManyWithoutPlayer2NestedInput
  }

  export type PlayerUpsertWithoutGame_losedInput = {
    update: XOR<PlayerUpdateWithoutGame_losedInput, PlayerUncheckedUpdateWithoutGame_losedInput>
    create: XOR<PlayerCreateWithoutGame_losedInput, PlayerUncheckedCreateWithoutGame_losedInput>
  }

  export type PlayerUpdateWithoutGame_losedInput = {
    username?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    is_playing?: BoolFieldUpdateOperationsInput | boolean
    wines?: IntFieldUpdateOperationsInput | number
    loses?: IntFieldUpdateOperationsInput | number
    authentification_token?: StringFieldUpdateOperationsInput | string
    game_winned?: game_historyUpdateManyWithoutWinnerNestedInput
    msgs?: messageUpdateManyWithoutAuthorNestedInput
    membership?: membershipUpdateManyWithoutPlayerNestedInput
    relation_from?: relationUpdateManyWithoutPlayer1NestedInput
    relation_too?: relationUpdateManyWithoutPlayer2NestedInput
  }

  export type PlayerUncheckedUpdateWithoutGame_losedInput = {
    player_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    is_playing?: BoolFieldUpdateOperationsInput | boolean
    wines?: IntFieldUpdateOperationsInput | number
    loses?: IntFieldUpdateOperationsInput | number
    authentification_token?: StringFieldUpdateOperationsInput | string
    game_winned?: game_historyUncheckedUpdateManyWithoutWinnerNestedInput
    msgs?: messageUncheckedUpdateManyWithoutAuthorNestedInput
    membership?: membershipUncheckedUpdateManyWithoutPlayerNestedInput
    relation_from?: relationUncheckedUpdateManyWithoutPlayer1NestedInput
    relation_too?: relationUncheckedUpdateManyWithoutPlayer2NestedInput
  }

  export type messageCreateWithoutCreated_inInput = {
    content: string
    created_at?: Date | string
    author: PlayerCreateNestedOneWithoutMsgsInput
  }

  export type messageUncheckedCreateWithoutCreated_inInput = {
    message_id?: number
    content: string
    created_at?: Date | string
    author_id: number
  }

  export type messageCreateOrConnectWithoutCreated_inInput = {
    where: messageWhereUniqueInput
    create: XOR<messageCreateWithoutCreated_inInput, messageUncheckedCreateWithoutCreated_inInput>
  }

  export type membershipCreateWithoutChatroomInput = {
    player: PlayerCreateNestedOneWithoutMembershipInput
    rool: string
  }

  export type membershipUncheckedCreateWithoutChatroomInput = {
    id_membership?: number
    player_id: number
    rool: string
  }

  export type membershipCreateOrConnectWithoutChatroomInput = {
    where: membershipWhereUniqueInput
    create: XOR<membershipCreateWithoutChatroomInput, membershipUncheckedCreateWithoutChatroomInput>
  }

  export type messageUpsertWithWhereUniqueWithoutCreated_inInput = {
    where: messageWhereUniqueInput
    update: XOR<messageUpdateWithoutCreated_inInput, messageUncheckedUpdateWithoutCreated_inInput>
    create: XOR<messageCreateWithoutCreated_inInput, messageUncheckedCreateWithoutCreated_inInput>
  }

  export type messageUpdateWithWhereUniqueWithoutCreated_inInput = {
    where: messageWhereUniqueInput
    data: XOR<messageUpdateWithoutCreated_inInput, messageUncheckedUpdateWithoutCreated_inInput>
  }

  export type messageUpdateManyWithWhereWithoutCreated_inInput = {
    where: messageScalarWhereInput
    data: XOR<messageUpdateManyMutationInput, messageUncheckedUpdateManyWithoutMsgsInput>
  }

  export type membershipUpsertWithWhereUniqueWithoutChatroomInput = {
    where: membershipWhereUniqueInput
    update: XOR<membershipUpdateWithoutChatroomInput, membershipUncheckedUpdateWithoutChatroomInput>
    create: XOR<membershipCreateWithoutChatroomInput, membershipUncheckedCreateWithoutChatroomInput>
  }

  export type membershipUpdateWithWhereUniqueWithoutChatroomInput = {
    where: membershipWhereUniqueInput
    data: XOR<membershipUpdateWithoutChatroomInput, membershipUncheckedUpdateWithoutChatroomInput>
  }

  export type membershipUpdateManyWithWhereWithoutChatroomInput = {
    where: membershipScalarWhereInput
    data: XOR<membershipUpdateManyMutationInput, membershipUncheckedUpdateManyWithoutMembershipInput>
  }

  export type PlayerCreateWithoutMsgsInput = {
    username: string
    avatar?: string
    is_playing?: boolean
    wines?: number
    loses?: number
    authentification_token: string
    game_winned?: game_historyCreateNestedManyWithoutWinnerInput
    game_losed?: game_historyCreateNestedManyWithoutLooserInput
    membership?: membershipCreateNestedManyWithoutPlayerInput
    relation_from?: relationCreateNestedManyWithoutPlayer1Input
    relation_too?: relationCreateNestedManyWithoutPlayer2Input
  }

  export type PlayerUncheckedCreateWithoutMsgsInput = {
    player_id?: number
    username: string
    avatar?: string
    is_playing?: boolean
    wines?: number
    loses?: number
    authentification_token: string
    game_winned?: game_historyUncheckedCreateNestedManyWithoutWinnerInput
    game_losed?: game_historyUncheckedCreateNestedManyWithoutLooserInput
    membership?: membershipUncheckedCreateNestedManyWithoutPlayerInput
    relation_from?: relationUncheckedCreateNestedManyWithoutPlayer1Input
    relation_too?: relationUncheckedCreateNestedManyWithoutPlayer2Input
  }

  export type PlayerCreateOrConnectWithoutMsgsInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutMsgsInput, PlayerUncheckedCreateWithoutMsgsInput>
  }

  export type chatroomCreateWithoutMsgsInput = {
    name: string
    ischannel: boolean
    ispublic: boolean
    password: string
    created_at: string
    updated_at: string
    membership?: membershipCreateNestedManyWithoutChatroomInput
  }

  export type chatroomUncheckedCreateWithoutMsgsInput = {
    chat_room_id?: number
    name: string
    ischannel: boolean
    ispublic: boolean
    password: string
    created_at: string
    updated_at: string
    membership?: membershipUncheckedCreateNestedManyWithoutChatroomInput
  }

  export type chatroomCreateOrConnectWithoutMsgsInput = {
    where: chatroomWhereUniqueInput
    create: XOR<chatroomCreateWithoutMsgsInput, chatroomUncheckedCreateWithoutMsgsInput>
  }

  export type PlayerUpsertWithoutMsgsInput = {
    update: XOR<PlayerUpdateWithoutMsgsInput, PlayerUncheckedUpdateWithoutMsgsInput>
    create: XOR<PlayerCreateWithoutMsgsInput, PlayerUncheckedCreateWithoutMsgsInput>
  }

  export type PlayerUpdateWithoutMsgsInput = {
    username?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    is_playing?: BoolFieldUpdateOperationsInput | boolean
    wines?: IntFieldUpdateOperationsInput | number
    loses?: IntFieldUpdateOperationsInput | number
    authentification_token?: StringFieldUpdateOperationsInput | string
    game_winned?: game_historyUpdateManyWithoutWinnerNestedInput
    game_losed?: game_historyUpdateManyWithoutLooserNestedInput
    membership?: membershipUpdateManyWithoutPlayerNestedInput
    relation_from?: relationUpdateManyWithoutPlayer1NestedInput
    relation_too?: relationUpdateManyWithoutPlayer2NestedInput
  }

  export type PlayerUncheckedUpdateWithoutMsgsInput = {
    player_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    is_playing?: BoolFieldUpdateOperationsInput | boolean
    wines?: IntFieldUpdateOperationsInput | number
    loses?: IntFieldUpdateOperationsInput | number
    authentification_token?: StringFieldUpdateOperationsInput | string
    game_winned?: game_historyUncheckedUpdateManyWithoutWinnerNestedInput
    game_losed?: game_historyUncheckedUpdateManyWithoutLooserNestedInput
    membership?: membershipUncheckedUpdateManyWithoutPlayerNestedInput
    relation_from?: relationUncheckedUpdateManyWithoutPlayer1NestedInput
    relation_too?: relationUncheckedUpdateManyWithoutPlayer2NestedInput
  }

  export type chatroomUpsertWithoutMsgsInput = {
    update: XOR<chatroomUpdateWithoutMsgsInput, chatroomUncheckedUpdateWithoutMsgsInput>
    create: XOR<chatroomCreateWithoutMsgsInput, chatroomUncheckedCreateWithoutMsgsInput>
  }

  export type chatroomUpdateWithoutMsgsInput = {
    name?: StringFieldUpdateOperationsInput | string
    ischannel?: BoolFieldUpdateOperationsInput | boolean
    ispublic?: BoolFieldUpdateOperationsInput | boolean
    password?: StringFieldUpdateOperationsInput | string
    created_at?: StringFieldUpdateOperationsInput | string
    updated_at?: StringFieldUpdateOperationsInput | string
    membership?: membershipUpdateManyWithoutChatroomNestedInput
  }

  export type chatroomUncheckedUpdateWithoutMsgsInput = {
    chat_room_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    ischannel?: BoolFieldUpdateOperationsInput | boolean
    ispublic?: BoolFieldUpdateOperationsInput | boolean
    password?: StringFieldUpdateOperationsInput | string
    created_at?: StringFieldUpdateOperationsInput | string
    updated_at?: StringFieldUpdateOperationsInput | string
    membership?: membershipUncheckedUpdateManyWithoutChatroomNestedInput
  }

  export type PlayerCreateWithoutMembershipInput = {
    username: string
    avatar?: string
    is_playing?: boolean
    wines?: number
    loses?: number
    authentification_token: string
    game_winned?: game_historyCreateNestedManyWithoutWinnerInput
    game_losed?: game_historyCreateNestedManyWithoutLooserInput
    msgs?: messageCreateNestedManyWithoutAuthorInput
    relation_from?: relationCreateNestedManyWithoutPlayer1Input
    relation_too?: relationCreateNestedManyWithoutPlayer2Input
  }

  export type PlayerUncheckedCreateWithoutMembershipInput = {
    player_id?: number
    username: string
    avatar?: string
    is_playing?: boolean
    wines?: number
    loses?: number
    authentification_token: string
    game_winned?: game_historyUncheckedCreateNestedManyWithoutWinnerInput
    game_losed?: game_historyUncheckedCreateNestedManyWithoutLooserInput
    msgs?: messageUncheckedCreateNestedManyWithoutAuthorInput
    relation_from?: relationUncheckedCreateNestedManyWithoutPlayer1Input
    relation_too?: relationUncheckedCreateNestedManyWithoutPlayer2Input
  }

  export type PlayerCreateOrConnectWithoutMembershipInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutMembershipInput, PlayerUncheckedCreateWithoutMembershipInput>
  }

  export type chatroomCreateWithoutMembershipInput = {
    name: string
    ischannel: boolean
    ispublic: boolean
    password: string
    created_at: string
    updated_at: string
    msgs?: messageCreateNestedManyWithoutCreated_inInput
  }

  export type chatroomUncheckedCreateWithoutMembershipInput = {
    chat_room_id?: number
    name: string
    ischannel: boolean
    ispublic: boolean
    password: string
    created_at: string
    updated_at: string
    msgs?: messageUncheckedCreateNestedManyWithoutCreated_inInput
  }

  export type chatroomCreateOrConnectWithoutMembershipInput = {
    where: chatroomWhereUniqueInput
    create: XOR<chatroomCreateWithoutMembershipInput, chatroomUncheckedCreateWithoutMembershipInput>
  }

  export type PlayerUpsertWithoutMembershipInput = {
    update: XOR<PlayerUpdateWithoutMembershipInput, PlayerUncheckedUpdateWithoutMembershipInput>
    create: XOR<PlayerCreateWithoutMembershipInput, PlayerUncheckedCreateWithoutMembershipInput>
  }

  export type PlayerUpdateWithoutMembershipInput = {
    username?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    is_playing?: BoolFieldUpdateOperationsInput | boolean
    wines?: IntFieldUpdateOperationsInput | number
    loses?: IntFieldUpdateOperationsInput | number
    authentification_token?: StringFieldUpdateOperationsInput | string
    game_winned?: game_historyUpdateManyWithoutWinnerNestedInput
    game_losed?: game_historyUpdateManyWithoutLooserNestedInput
    msgs?: messageUpdateManyWithoutAuthorNestedInput
    relation_from?: relationUpdateManyWithoutPlayer1NestedInput
    relation_too?: relationUpdateManyWithoutPlayer2NestedInput
  }

  export type PlayerUncheckedUpdateWithoutMembershipInput = {
    player_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    is_playing?: BoolFieldUpdateOperationsInput | boolean
    wines?: IntFieldUpdateOperationsInput | number
    loses?: IntFieldUpdateOperationsInput | number
    authentification_token?: StringFieldUpdateOperationsInput | string
    game_winned?: game_historyUncheckedUpdateManyWithoutWinnerNestedInput
    game_losed?: game_historyUncheckedUpdateManyWithoutLooserNestedInput
    msgs?: messageUncheckedUpdateManyWithoutAuthorNestedInput
    relation_from?: relationUncheckedUpdateManyWithoutPlayer1NestedInput
    relation_too?: relationUncheckedUpdateManyWithoutPlayer2NestedInput
  }

  export type chatroomUpsertWithoutMembershipInput = {
    update: XOR<chatroomUpdateWithoutMembershipInput, chatroomUncheckedUpdateWithoutMembershipInput>
    create: XOR<chatroomCreateWithoutMembershipInput, chatroomUncheckedCreateWithoutMembershipInput>
  }

  export type chatroomUpdateWithoutMembershipInput = {
    name?: StringFieldUpdateOperationsInput | string
    ischannel?: BoolFieldUpdateOperationsInput | boolean
    ispublic?: BoolFieldUpdateOperationsInput | boolean
    password?: StringFieldUpdateOperationsInput | string
    created_at?: StringFieldUpdateOperationsInput | string
    updated_at?: StringFieldUpdateOperationsInput | string
    msgs?: messageUpdateManyWithoutCreated_inNestedInput
  }

  export type chatroomUncheckedUpdateWithoutMembershipInput = {
    chat_room_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    ischannel?: BoolFieldUpdateOperationsInput | boolean
    ispublic?: BoolFieldUpdateOperationsInput | boolean
    password?: StringFieldUpdateOperationsInput | string
    created_at?: StringFieldUpdateOperationsInput | string
    updated_at?: StringFieldUpdateOperationsInput | string
    msgs?: messageUncheckedUpdateManyWithoutCreated_inNestedInput
  }

  export type PlayerCreateWithoutRelation_fromInput = {
    username: string
    avatar?: string
    is_playing?: boolean
    wines?: number
    loses?: number
    authentification_token: string
    game_winned?: game_historyCreateNestedManyWithoutWinnerInput
    game_losed?: game_historyCreateNestedManyWithoutLooserInput
    msgs?: messageCreateNestedManyWithoutAuthorInput
    membership?: membershipCreateNestedManyWithoutPlayerInput
    relation_too?: relationCreateNestedManyWithoutPlayer2Input
  }

  export type PlayerUncheckedCreateWithoutRelation_fromInput = {
    player_id?: number
    username: string
    avatar?: string
    is_playing?: boolean
    wines?: number
    loses?: number
    authentification_token: string
    game_winned?: game_historyUncheckedCreateNestedManyWithoutWinnerInput
    game_losed?: game_historyUncheckedCreateNestedManyWithoutLooserInput
    msgs?: messageUncheckedCreateNestedManyWithoutAuthorInput
    membership?: membershipUncheckedCreateNestedManyWithoutPlayerInput
    relation_too?: relationUncheckedCreateNestedManyWithoutPlayer2Input
  }

  export type PlayerCreateOrConnectWithoutRelation_fromInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutRelation_fromInput, PlayerUncheckedCreateWithoutRelation_fromInput>
  }

  export type PlayerCreateWithoutRelation_tooInput = {
    username: string
    avatar?: string
    is_playing?: boolean
    wines?: number
    loses?: number
    authentification_token: string
    game_winned?: game_historyCreateNestedManyWithoutWinnerInput
    game_losed?: game_historyCreateNestedManyWithoutLooserInput
    msgs?: messageCreateNestedManyWithoutAuthorInput
    membership?: membershipCreateNestedManyWithoutPlayerInput
    relation_from?: relationCreateNestedManyWithoutPlayer1Input
  }

  export type PlayerUncheckedCreateWithoutRelation_tooInput = {
    player_id?: number
    username: string
    avatar?: string
    is_playing?: boolean
    wines?: number
    loses?: number
    authentification_token: string
    game_winned?: game_historyUncheckedCreateNestedManyWithoutWinnerInput
    game_losed?: game_historyUncheckedCreateNestedManyWithoutLooserInput
    msgs?: messageUncheckedCreateNestedManyWithoutAuthorInput
    membership?: membershipUncheckedCreateNestedManyWithoutPlayerInput
    relation_from?: relationUncheckedCreateNestedManyWithoutPlayer1Input
  }

  export type PlayerCreateOrConnectWithoutRelation_tooInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutRelation_tooInput, PlayerUncheckedCreateWithoutRelation_tooInput>
  }

  export type PlayerUpsertWithoutRelation_fromInput = {
    update: XOR<PlayerUpdateWithoutRelation_fromInput, PlayerUncheckedUpdateWithoutRelation_fromInput>
    create: XOR<PlayerCreateWithoutRelation_fromInput, PlayerUncheckedCreateWithoutRelation_fromInput>
  }

  export type PlayerUpdateWithoutRelation_fromInput = {
    username?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    is_playing?: BoolFieldUpdateOperationsInput | boolean
    wines?: IntFieldUpdateOperationsInput | number
    loses?: IntFieldUpdateOperationsInput | number
    authentification_token?: StringFieldUpdateOperationsInput | string
    game_winned?: game_historyUpdateManyWithoutWinnerNestedInput
    game_losed?: game_historyUpdateManyWithoutLooserNestedInput
    msgs?: messageUpdateManyWithoutAuthorNestedInput
    membership?: membershipUpdateManyWithoutPlayerNestedInput
    relation_too?: relationUpdateManyWithoutPlayer2NestedInput
  }

  export type PlayerUncheckedUpdateWithoutRelation_fromInput = {
    player_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    is_playing?: BoolFieldUpdateOperationsInput | boolean
    wines?: IntFieldUpdateOperationsInput | number
    loses?: IntFieldUpdateOperationsInput | number
    authentification_token?: StringFieldUpdateOperationsInput | string
    game_winned?: game_historyUncheckedUpdateManyWithoutWinnerNestedInput
    game_losed?: game_historyUncheckedUpdateManyWithoutLooserNestedInput
    msgs?: messageUncheckedUpdateManyWithoutAuthorNestedInput
    membership?: membershipUncheckedUpdateManyWithoutPlayerNestedInput
    relation_too?: relationUncheckedUpdateManyWithoutPlayer2NestedInput
  }

  export type PlayerUpsertWithoutRelation_tooInput = {
    update: XOR<PlayerUpdateWithoutRelation_tooInput, PlayerUncheckedUpdateWithoutRelation_tooInput>
    create: XOR<PlayerCreateWithoutRelation_tooInput, PlayerUncheckedCreateWithoutRelation_tooInput>
  }

  export type PlayerUpdateWithoutRelation_tooInput = {
    username?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    is_playing?: BoolFieldUpdateOperationsInput | boolean
    wines?: IntFieldUpdateOperationsInput | number
    loses?: IntFieldUpdateOperationsInput | number
    authentification_token?: StringFieldUpdateOperationsInput | string
    game_winned?: game_historyUpdateManyWithoutWinnerNestedInput
    game_losed?: game_historyUpdateManyWithoutLooserNestedInput
    msgs?: messageUpdateManyWithoutAuthorNestedInput
    membership?: membershipUpdateManyWithoutPlayerNestedInput
    relation_from?: relationUpdateManyWithoutPlayer1NestedInput
  }

  export type PlayerUncheckedUpdateWithoutRelation_tooInput = {
    player_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    is_playing?: BoolFieldUpdateOperationsInput | boolean
    wines?: IntFieldUpdateOperationsInput | number
    loses?: IntFieldUpdateOperationsInput | number
    authentification_token?: StringFieldUpdateOperationsInput | string
    game_winned?: game_historyUncheckedUpdateManyWithoutWinnerNestedInput
    game_losed?: game_historyUncheckedUpdateManyWithoutLooserNestedInput
    msgs?: messageUncheckedUpdateManyWithoutAuthorNestedInput
    membership?: membershipUncheckedUpdateManyWithoutPlayerNestedInput
    relation_from?: relationUncheckedUpdateManyWithoutPlayer1NestedInput
  }

  export type game_historyUpdateWithoutWinnerInput = {
    winner_scoor?: IntFieldUpdateOperationsInput | number
    looser?: PlayerUpdateOneRequiredWithoutGame_losedNestedInput
    losser_scoor?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type game_historyUncheckedUpdateWithoutWinnerInput = {
    id_game_history?: IntFieldUpdateOperationsInput | number
    winner_scoor?: IntFieldUpdateOperationsInput | number
    looser_id?: IntFieldUpdateOperationsInput | number
    losser_scoor?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type game_historyUncheckedUpdateManyWithoutGame_winnedInput = {
    id_game_history?: IntFieldUpdateOperationsInput | number
    winner_scoor?: IntFieldUpdateOperationsInput | number
    looser_id?: IntFieldUpdateOperationsInput | number
    losser_scoor?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type game_historyUpdateWithoutLooserInput = {
    winner?: PlayerUpdateOneRequiredWithoutGame_winnedNestedInput
    winner_scoor?: IntFieldUpdateOperationsInput | number
    losser_scoor?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type game_historyUncheckedUpdateWithoutLooserInput = {
    id_game_history?: IntFieldUpdateOperationsInput | number
    winner_id?: IntFieldUpdateOperationsInput | number
    winner_scoor?: IntFieldUpdateOperationsInput | number
    losser_scoor?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type game_historyUncheckedUpdateManyWithoutGame_losedInput = {
    id_game_history?: IntFieldUpdateOperationsInput | number
    winner_id?: IntFieldUpdateOperationsInput | number
    winner_scoor?: IntFieldUpdateOperationsInput | number
    losser_scoor?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type messageUpdateWithoutAuthorInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_in?: chatroomUpdateOneRequiredWithoutMsgsNestedInput
  }

  export type messageUncheckedUpdateWithoutAuthorInput = {
    message_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    chat_id?: IntFieldUpdateOperationsInput | number
  }

  export type messageUncheckedUpdateManyWithoutMsgsInput = {
    message_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    chat_id?: IntFieldUpdateOperationsInput | number
  }

  export type membershipUpdateWithoutPlayerInput = {
    chatroom?: chatroomUpdateOneRequiredWithoutMembershipNestedInput
    rool?: StringFieldUpdateOperationsInput | string
  }

  export type membershipUncheckedUpdateWithoutPlayerInput = {
    id_membership?: IntFieldUpdateOperationsInput | number
    chat_id?: IntFieldUpdateOperationsInput | number
    rool?: StringFieldUpdateOperationsInput | string
  }

  export type membershipUncheckedUpdateManyWithoutMembershipInput = {
    id_membership?: IntFieldUpdateOperationsInput | number
    chat_id?: IntFieldUpdateOperationsInput | number
    rool?: StringFieldUpdateOperationsInput | string
  }

  export type relationUpdateWithoutPlayer1Input = {
    player2?: PlayerUpdateOneRequiredWithoutRelation_tooNestedInput
    status?: StringFieldUpdateOperationsInput | string
  }

  export type relationUncheckedUpdateWithoutPlayer1Input = {
    id_relation?: IntFieldUpdateOperationsInput | number
    player2_id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type relationUncheckedUpdateManyWithoutRelation_fromInput = {
    id_relation?: IntFieldUpdateOperationsInput | number
    player2_id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type relationUpdateWithoutPlayer2Input = {
    player1?: PlayerUpdateOneRequiredWithoutRelation_fromNestedInput
    status?: StringFieldUpdateOperationsInput | string
  }

  export type relationUncheckedUpdateWithoutPlayer2Input = {
    id_relation?: IntFieldUpdateOperationsInput | number
    player1_id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type relationUncheckedUpdateManyWithoutRelation_tooInput = {
    id_relation?: IntFieldUpdateOperationsInput | number
    player1_id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
  }

  export type messageUpdateWithoutCreated_inInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: PlayerUpdateOneRequiredWithoutMsgsNestedInput
  }

  export type messageUncheckedUpdateWithoutCreated_inInput = {
    message_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    author_id?: IntFieldUpdateOperationsInput | number
  }

  export type membershipUpdateWithoutChatroomInput = {
    player?: PlayerUpdateOneRequiredWithoutMembershipNestedInput
    rool?: StringFieldUpdateOperationsInput | string
  }

  export type membershipUncheckedUpdateWithoutChatroomInput = {
    id_membership?: IntFieldUpdateOperationsInput | number
    player_id?: IntFieldUpdateOperationsInput | number
    rool?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}